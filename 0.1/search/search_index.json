{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contribution/rust/","title":"Run clippy before submitting a PR for reviewing","text":"<p>Clippy is a nice tool to check common pitfalls and anti-patterns. Its lints get often turned into lints of the compiler.</p> <pre><code>cargo clippy --no-deps --workspace --exclude kraken-sdk \n</code></pre>"},{"location":"contribution/rust/#formatting-with-rustfmt","title":"Formatting with <code>rustfmt</code>","text":"<p><code>rustfmt</code> is used to format the complete rust codebase and only on weird formatting cases, the <code>#[rustfmt::skip]</code> annotation should be used.</p> <p>Run <code>rustfmt</code> with the following parameters:</p> <pre><code>rustfmt --config imports_granularity=\"Module,group_imports=StdExternalCrate\" $FILE\n</code></pre>"},{"location":"contribution/rust/#use-and-mod-prevalence","title":"Use and mod prevalence","text":"<p>Module declarations should always be declared after the use statements.</p> <p>Do: <pre><code>use std::fs::create_dir;\n\nuse uuid::Uuid;\n\nmod bar;\nmod foo;\n</code></pre></p> <p>Don't: <pre><code>mod bar;\nmod foo;\n\nuse std::fs::create_dir;\n\nuse uuid::Uuid;\n</code></pre></p>"},{"location":"contribution/rust/#module-local-imports-reexports","title":"Module-local imports / reexports","text":"<p>Use statements should either use the <code>crate</code>, <code>super</code> or <code>self</code> as top-level path-segments instead of implicit relative paths.</p> <p>This is important as <code>rustfmt</code> would move the corresponding use statements in the \"external crate\" section.</p> <p>Do: <pre><code>use self::bar::*;\n\nmod bar;\n</code></pre></p> <p>Don't: <pre><code>use bar::*;\n\nmod bar;\n</code></pre></p>"}]}
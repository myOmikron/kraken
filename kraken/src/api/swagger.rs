//! This module holds the swagger definitions.
//!
//! They got created with [utoipa].

use utoipa::openapi::security::{ApiKey, ApiKeyValue, Http, HttpAuthScheme, SecurityScheme};
use utoipa::{Modify, OpenApi};

use crate::api::handler;
use crate::api::handler::{
    api_keys, attack_results, attacks, auth, data_export, domains, global_tags, hosts, leeches,
    oauth, oauth_applications, oauth_decisions, ports, services, settings, users, websocket,
    wordlists, workspace_invitations, workspace_tags, workspaces,
};
use crate::modules::oauth::schemas as oauth_schemas;
use crate::modules::tls;
use crate::{chan, models};

struct SecurityAddon;
impl Modify for SecurityAddon {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        if let Some(components) = openapi.components.as_mut() {
            components.add_security_scheme(
                "api_key",
                SecurityScheme::ApiKey(ApiKey::Cookie(ApiKeyValue::new("id"))),
            )
        }
    }
}

struct SecurityAddon2;
impl Modify for SecurityAddon2 {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        if let Some(components) = openapi.components.as_mut() {
            components.add_security_scheme(
                "bearer_token",
                SecurityScheme::Http(Http::new(HttpAuthScheme::Bearer)),
            )
        }
    }
}

#[derive(OpenApi)]
#[openapi(
    paths(
        auth::test,
        auth::login,
        auth::logout,
        auth::start_auth,
        auth::finish_auth,
        auth::start_register,
        auth::finish_register,
        leeches::create_leech,
        leeches::delete_leech,
        leeches::get_all_leeches,
        leeches::get_leech,
        leeches::update_leech,
        leeches::gen_leech_config,
        websocket::websocket,
        users::create_user,
        users::delete_user,
        users::get_user,
        users::get_all_users_admin,
        users::get_me,
        users::update_me,
        users::set_password,
        users::get_all_users,
        workspaces::create_workspace,
        workspaces::delete_workspace,
        workspaces::get_workspace,
        workspaces::get_all_workspaces,
        workspaces::update_workspace,
        workspaces::get_workspace_admin,
        workspaces::get_all_workspaces_admin,
        workspaces::transfer_ownership,
        workspaces::create_invitation,
        workspaces::retract_invitation,
        workspaces::get_all_workspace_invitations,
        workspaces::search,
        workspaces::get_searches,
        workspaces::get_search_results,
        attacks::bruteforce_subdomains,
        attacks::scan_tcp_ports,
        attacks::query_certificate_transparency,
        attacks::delete_attack,
        attacks::get_attack,
        attacks::get_all_attacks,
        attacks::get_workspace_attacks,
        attacks::query_dehashed,
        attacks::hosts_alive_check,
        attacks::service_detection,
        attacks::dns_resolution,
        attack_results::get_bruteforce_subdomains_results,
        attack_results::get_tcp_port_scan_results,
        attack_results::get_query_certificate_transparency_results,
        attack_results::get_query_unhashed_results,
        attack_results::get_host_alive_results,
        attack_results::get_service_detection_results,
        attack_results::get_dns_resolution_results,
        oauth_applications::create_oauth_app,
        oauth_applications::get_all_oauth_apps,
        oauth_applications::get_oauth_app,
        oauth_applications::update_oauth_app,
        oauth_applications::delete_oauth_app,
        oauth::info,
        oauth::accept,
        oauth::deny,
        oauth_decisions::get_decisions,
        oauth_decisions::revoke_decision,
        settings::get_settings,
        settings::update_settings,
        api_keys::create_api_key,
        api_keys::delete_api_key,
        api_keys::get_api_keys,
        api_keys::update_api_key,
        global_tags::create_global_tag,
        global_tags::get_all_global_tags,
        global_tags::update_global_tag,
        global_tags::delete_global_tag,
        workspace_tags::create_workspace_tag,
        workspace_tags::get_all_workspace_tags,
        workspace_tags::update_workspace_tag,
        workspace_tags::delete_workspace_tag,
        hosts::get_all_hosts,
        hosts::get_host,
        hosts::create_host,
        hosts::update_host,
        ports::get_all_ports,
        ports::get_port,
        ports::create_port,
        ports::update_port,
        services::get_all_services,
        services::get_service,
        services::create_service,
        services::update_service,
        domains::get_all_domains,
        domains::get_domain,
        domains::create_domain,
        domains::update_domain,
        wordlists::get_all_wordlists,
        wordlists::create_wordlist_admin,
        wordlists::get_all_wordlists_admin,
        wordlists::update_wordlist_admin,
        wordlists::delete_wordlist_admin,
        workspace_invitations::get_all_invitations,
        workspace_invitations::accept_invitation,
        workspace_invitations::decline_invitation,
    ),
    components(schemas(
        handler::ApiErrorResponse,
        handler::ApiStatusCode,
        handler::UuidResponse,
        handler::SimpleTag,
        handler::TagType,
        handler::SimpleAggregationSource,
        auth::LoginRequest,
        auth::FinishRegisterRequest,
        leeches::CreateLeechRequest,
        leeches::SimpleLeech,
        leeches::GetAllLeechesResponse,
        leeches::UpdateLeechRequest,
        leeches::LeechConfig,
        tls::LeechTlsConfig,
        users::CreateUserRequest,
        users::GetUser,
        users::GetUserResponse,
        users::UpdateMeRequest,
        users::SetPasswordRequest,
        users::SimpleUser,
        users::GetAllUsersResponse,
        workspaces::CreateWorkspaceRequest,
        workspaces::SimpleWorkspace,
        workspaces::FullWorkspace,
        workspaces::GetAllWorkspacesResponse,
        workspaces::UpdateWorkspaceRequest,
        workspaces::TransferWorkspaceRequest,
        workspaces::InviteToWorkspace,
        workspaces::SearchWorkspaceRequest,
        workspaces::SearchEntry,
        workspaces::SearchResultEntry,
        attacks::SimpleAttack,
        attacks::ListAttacks,
        attacks::BruteforceSubdomainsRequest,
        attacks::HostsAliveRequest,
        attacks::ScanTcpPortsRequest,
        attacks::QueryCertificateTransparencyRequest,
        attacks::PortOrRange,
        attacks::ServiceDetectionRequest,
        attacks::DnsResolutionRequest,
        attack_results::SimpleBruteforceSubdomainsResult,
        attack_results::SimpleTcpPortScanResult,
        attack_results::FullQueryCertificateTransparencyResult,
        attack_results::SimpleQueryUnhashedResult,
        attack_results::SimpleHostAliveResult,
        attack_results::FullServiceDetectionResult,
        attack_results::SimpleDnsResolutionResult,
        handler::TcpPortScanResultsPage,
        dehashed_rs::Query,
        dehashed_rs::SearchType,
        attacks::QueryDehashedRequest,
        models::AttackType,
        oauth_applications::CreateAppRequest,
        oauth_applications::SimpleOauthClient,
        oauth_applications::FullOauthClient,
        oauth_applications::GetAppsResponse,
        oauth_applications::UpdateAppRequest,
        oauth::OpenRequestInfo,
        oauth_decisions::GetMyDecisionsResponse,
        oauth_decisions::FullDecision,
        settings::SettingsFull,
        settings::UpdateSettingsRequest,
        api_keys::FullApiKey,
        api_keys::CreateApiKeyRequest,
        api_keys::GetApiKeysResponse,
        api_keys::UpdateApiKeyRequest,
        hosts::SimpleHost,
        hosts::FullHost,
        hosts::UpdateHostRequest,
        hosts::CreateHostRequest,
        ports::SimplePort,
        ports::FullPort,
        ports::UpdatePortRequest,
        ports::CreatePortRequest,
        services::SimpleService,
        services::FullService,
        services::UpdateServiceRequest,
        services::CreateServiceRequest,
        domains::SimpleDomain,
        domains::FullDomain,
        domains::UpdateDomainRequest,
        domains::GetAllDomainsQuery,
        domains::CreateDomainRequest,
        handler::HostResultsPage,
        handler::DomainResultsPage,
        handler::PortResultsPage,
        handler::ServiceResultsPage,
        models::OsType,
        global_tags::CreateGlobalTagRequest,
        models::Color,
        models::DomainCertainty,
        models::HostCertainty,
        models::PortCertainty,
        models::ServiceCertainty,
        models::UserPermission,
        models::ManualHostCertainty,
        models::ManualPortCertainty,
        models::ManualServiceCertainty,
        global_tags::FullGlobalTag,
        global_tags::GetGlobalTagsResponse,
        global_tags::UpdateGlobalTag,
        models::PortProtocol,
        workspace_tags::FullWorkspaceTag,
        workspace_tags::GetWorkspaceTagsResponse,
        workspace_tags::UpdateWorkspaceTag,
        workspace_tags::CreateWorkspaceTagRequest,
        wordlists::GetAllWordlistsResponse,
        wordlists::SimpleWordlist,
        wordlists::CreateWordlistRequest,
        wordlists::GetAllWordlistsAdminResponse,
        wordlists::FullWordlist,
        wordlists::UpdateWordlistRequest,
        workspace_invitations::FullWorkspaceInvitation,
        workspace_invitations::WorkspaceInvitationList,
        chan::WsMessage,
        chan::CertificateTransparencyEntry,
    )),
    modifiers(&SecurityAddon)
)]
pub(crate) struct FrontendApi;

#[derive(OpenApi)]
#[openapi(
    paths(oauth::auth, oauth::token, data_export::export_workspace),
    components(schemas(
        models::OsType,
        models::PortProtocol,
        models::DomainCertainty,
        models::HostCertainty,
        models::PortCertainty,
        models::ServiceCertainty,
        handler::ApiErrorResponse,
        handler::ApiStatusCode,
        oauth_schemas::TokenRequest,
        oauth_schemas::TokenResponse,
        oauth_schemas::TokenError,
        oauth_schemas::TokenErrorType,
        data_export::AggregatedWorkspace,
        data_export::AggregatedHost,
        data_export::AggregatedPort,
        data_export::AggregatedService,
        data_export::AggregatedDomain,
        data_export::AggregatedTags,
        data_export::AggregatedRelation,
    )),
    modifiers(&SecurityAddon2)
)]
pub(crate) struct ExternalApi;

syntax = "proto3";
package attacks;

import "attacks.shared.proto";

/*
-- BruteforceSubdomain
 */

// Request for starting a bruteforce subdomain attack
message BruteforceSubdomainRequest {
  // A unique id that identifies the attack
  string attack_uuid = 1;
  // The domain to use as base name. It shouldn't end in a . like DNS names.
  string domain = 2;
  // Path to a wordlist that can be used for subdomain enumeration.
  //
  // The entries in the wordlist are assumed to be line seperated.
  string wordlist_path = 3;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 4;
}

// Response streamed by an bruteforce subdomain attack
message BruteforceSubdomainResponse {
  // Found record
  shared.DNSRecord record = 1;
}

/*
-- TcpPortScan
 */

// Request for starting a tcp port scan attack
message TcpPortScanRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip addresses / networks to scan
  repeated attacks.shared.NetOrAddress targets = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 timeout = 4;
  // The concurrent task limit
  uint32 concurrent_limit = 5;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 6;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 7;
  // Skips the initial icmp check.
  //
  // All hosts are assumed to be reachable
  bool skip_icmp_check = 8;
}

// An (inclusive) range of ports
message PortRange {
  // The first port number in this range
  uint32 start = 1;
  // The last port number in this range
  uint32 end = 2;
}

// Either a single port or a range of them
message PortOrRange {
  // Workaround field to store a `oneof`
  oneof port_or_range {
    // A single port
    uint32 single = 1;

    // An (inclusive) range of ports
    PortRange range = 2;
  }
}

// Response streamed by an tcp port scan attack
message TcpPortScanResponse {
  // Address
  attacks.shared.Address address = 1;
  // Port value
  uint32 port = 2;
}

/*
--- Certificate Transparency
 */

// Certificate transparency request
message CertificateTransparencyRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The target domain to query
  string target = 2;
  // Also include already expired certificates
  bool include_expired = 3;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 4;
  // The interval to wait in between the retries
  // Specified in milliseconds.
  uint64 retry_interval = 5;
}


// Response to a certificate transparency request
message CertificateTransparencyResponse {
  // List of cert entries
  repeated shared.CertEntry entries = 1;
}

/*
 * Service Detection
 */

// Service detection request
message ServiceDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip address to connect to
  attacks.shared.Address address = 2;
  // The port to connect to
  uint32 port = 3;
  // The interval to wait for a response after connecting and sending an optional payload.
  // Specified in milliseconds.
  uint64 timeout = 4;
}

// Response to a service detection request
message ServiceDetectionResponse {
  // The ip address the service was found on
  attacks.shared.Address address = 3;
  // The port the service was found on
  uint32 port = 4;
  // Indicates how many services are given and how they are to be interpreted
  ServiceCertainty responseType = 1;
  // List of services, the interpretation of this field depends on the `responseType`
  repeated string services = 2;
}

// Indicates how many services are returned in a ServiceCertainty and how they are to be interpreted
enum ServiceCertainty {
  // The service is unknown
  UNKNOWN = 0;
  // The service might be one of the list
  MAYBE = 1;
  // The service has been identified
  DEFINITELY = 2;
}

// Service detection request for all specified ports
message UdpServiceDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip address to connect to
  attacks.shared.Address address = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // The concurrent task limit
  uint32 concurrent_limit = 4;
  // The number of times the packet sending should be retried if no response was received.
  uint32 max_retries = 5;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 6;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 timeout = 7;
}

// Response to a service detection request
message UdpServiceDetectionResponse {
  // The ip address the service was found on
  attacks.shared.Address address = 1;
  // Port value
  uint32 port = 2;
  // Indicates how many services are given and how they are to be interpreted
  ServiceCertainty certainty = 3;
  // List of services, the interpretation of this field depends on the `certainty`
  repeated string services = 4;
}

/*
 * Hosts alive check
 */

// Request for checking if hosts are alive
message HostsAliveRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The hosts that should be checked
  repeated attacks.shared.NetOrAddress targets = 2;
  // The timeout, specified in milliseconds.
  uint64 timeout = 3;
  // The concurrent task limit
  uint32 concurrent_limit = 4;
}

// Response for checking which hosts are alive
message HostsAliveResponse {
  // the hosts that responded
  attacks.shared.Address host = 1;
}

/*
 * DNS resolution
 */
message DnsResolutionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The domains to resolve
  repeated string targets = 2;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 3;
}

// Response streamed by a dns resolution attack
message DnsResolutionResponse {
  // Found record
  shared.DNSRecord record = 1;
}

// Implemented by leech; allows kraken to request attack from a leech
service ReqAttackService {
  rpc BruteforceSubdomains(BruteforceSubdomainRequest) returns (stream BruteforceSubdomainResponse);
  rpc RunTcpPortScan(TcpPortScanRequest) returns (stream TcpPortScanResponse);
  rpc QueryCertificateTransparency(CertificateTransparencyRequest) returns (CertificateTransparencyResponse);
  rpc ServiceDetection(ServiceDetectionRequest) returns (ServiceDetectionResponse);
  rpc UdpServiceDetection(UdpServiceDetectionRequest) returns (stream UdpServiceDetectionResponse);
  rpc HostsAliveCheck(HostsAliveRequest) returns (stream HostsAliveResponse);
  rpc DnsResolution(DnsResolutionRequest) returns (stream DnsResolutionResponse);
}

/*
------------------------ PushAttack -------------------------------
 */

// Request to push an attack which has been started manually through the leech's cli
message PushAttackRequest {
  // The uuid of a workspace
  string workspace_uuid = 1;

  // The user's api key
  string api_key = 2;

  // The attack's type as well as its response
  oneof response {
    // Response streamed by an bruteforce subdomain attack
    RepeatedBruteforceSubdomainResponse bruteforce_subdomain = 3;
    // Response streamed by an tcp port scan attack
    RepeatedTcpPortScanResponse tcp_port_scan = 4;
    // Response to a certificate transparency request
    CertificateTransparencyResponse certificate_transparency = 5;
    // Response to a service detection request
    ServiceDetectionResponse service_detection = 6;
    // Response for checking which hosts are alive
    RepeatedHostsAliveResponse hosts_alive = 7;
    // Response streamed by a dns resolution attack
    RepeatedDnsResolutionResponse dns_resolution = 8;
    // Response streamed by a dns resolution attack
    RepeatedUdpServiceDetectionResponse udp_service_detection = 9;
  }
}

// Thin wrapper to have a `repeated BruteforceSubdomainResponse` in a `oneof`
message RepeatedBruteforceSubdomainResponse {
  // repeated BruteforceSubdomainResponse
  repeated BruteforceSubdomainResponse responses = 1;
}
// Thin wrapper to have a `repeated TcpPortScanResponse` in a `oneof`
message RepeatedTcpPortScanResponse {
  // repeated TcpPortScanResponse
  repeated TcpPortScanResponse responses = 1;
}
// Thin wrapper to have a `repeated HostsAliveResponse` in a `oneof`
message RepeatedHostsAliveResponse {
  // repeated HostsAliveResponse
  repeated HostsAliveResponse responses = 1;
}
// Thin wrapper to have a `repeated DnsResolutionResponse` in a `oneof`
message RepeatedDnsResolutionResponse {
  // repeated DnsResolutionResponse
  repeated DnsResolutionResponse responses = 1;
}
// Thin wrapper to have a `repeated UdpServiceDetectionResponse` in a `oneof`
message RepeatedUdpServiceDetectionResponse {
  // repeated UdpServiceDetectionResponse
  repeated UdpServiceDetectionResponse responses = 1;
}

// Response to a manually pushed attack
message PushAttackResponse {
  // The attack uuid assigned by kraken
  string uuid = 1;
}

// Implemented by kraken; allows leeches to push manual attacks via cli
service PushAttackService {
  rpc PushAttack(PushAttackRequest) returns (PushAttackResponse);
}


/*
------------------------ Backlog -------------------------------
 */

// Request for a chunk of responses to be processed
message BacklogRequest {
  // Responses left from some previous attacks
  repeated AnyAttackResponse responses = 1;
}

// Response to a backlog request
//
// Might contain additional information in the future:
// What did go wrong (custom error type)? Which responses could be processed?
message BacklogResponse {}

// union of all messages which might be returned as response to any attack request
message AnyAttackResponse {
  // the attack that produced the response
  string attack_uuid = 1;

  // union of all messages which might be returned as response to any attack request
  oneof response {
    // Response streamed by an bruteforce subdomain attack
    BruteforceSubdomainResponse bruteforce_subdomain = 2;
    // Response streamed by an tcp port scan attack
    TcpPortScanResponse tcp_port_scan = 3;
    // Response to a certificate transparency request
    CertificateTransparencyResponse certificate_transparency = 4;
    // Response to a service detection request
    ServiceDetectionResponse service_detection = 5;
    // Response for checking which hosts are alive
    HostsAliveResponse hosts_alive = 6;
    // Response streamed by a dns resolution attack
    DnsResolutionResponse dns_resolution = 7;
    // Response streamed by a dns resolution attack
    UdpServiceDetectionResponse udp_service_detection = 8;
  }
}

// Implemented by kraken; allows leeches to upload results that failed to upload previously
service BacklogService {
  rpc SubmitBacklog(BacklogRequest) returns (BacklogResponse);
}
{
  "openapi": "3.0.3",
  "info": {
    "title": "kraken",
    "description": "The core component of kraken-project",
    "contact": { "name": "Niklas Pfister", "email": "git@omikron.dev" },
    "license": { "name": "AGPL-3.0" },
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/admin/applications": {
      "get": {
        "tags": ["OAuth Application"],
        "operationId": "get_all_oauth_apps",
        "responses": {
          "200": {
            "description": "Returns all oauth applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOauthApplications"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["OAuth Application"],
        "summary": "Create a new application",
        "description": "Create a new application",
        "operationId": "create_oauth_app",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAppRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Application was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/applications/{uuid}": {
      "get": {
        "tags": ["OAuth Application"],
        "operationId": "get_oauth_app",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an oauth applications",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullOauthClient" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["OAuth Application"],
        "summary": "Update an application",
        "description": "Update an application",
        "operationId": "update_oauth_app",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAppRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Application got updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["OAuth Application"],
        "summary": "Delete an application",
        "description": "Delete an application",
        "operationId": "delete_oauth_app",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Application was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/findingDefinitions/{uuid}": {
      "delete": {
        "tags": ["Knowledge Base"],
        "summary": "Delete a finding definition",
        "description": "Delete a finding definition",
        "operationId": "delete_finding_definition",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Finding Definition was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/globalTags": {
      "post": {
        "tags": ["Global Tags"],
        "summary": "Create a global tag.",
        "description": "Create a global tag.\n\nThis action requires admin privileges.",
        "operationId": "create_global_tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGlobalTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Global tag was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/globalTags/{uuid}": {
      "put": {
        "tags": ["Global Tags"],
        "summary": "Update a global tag",
        "description": "Update a global tag\n\nOne of the options must be set\n\nRequires admin privileges.",
        "operationId": "update_global_tag",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateGlobalTag" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Global tag was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Global Tags"],
        "summary": "Delete a global tag",
        "description": "Delete a global tag\n\nRequires admin privileges.",
        "operationId": "delete_global_tag",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Global tag was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/leeches": {
      "get": {
        "tags": ["Leech management"],
        "summary": "Retrieve all leeches",
        "description": "Retrieve all leeches",
        "operationId": "get_all_leeches",
        "responses": {
          "200": {
            "description": "Matched leeches",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListLeeches" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Leech management"],
        "summary": "Create a leech",
        "description": "Create a leech\n\nThe `name` parameter must be unique.\n\n`address` must be a valid address including a scheme and port.\nCurrently only https and http are supported as scheme.",
        "operationId": "create_leech",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateLeechRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Leech got created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/leeches/{uuid}": {
      "get": {
        "tags": ["Leech management"],
        "summary": "Retrieve a leech by its id",
        "description": "Retrieve a leech by its id",
        "operationId": "get_leech",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Matched leeches",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SimpleLeech" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Leech management"],
        "summary": "Update a leech by its id",
        "description": "Update a leech by its id\n\nAll parameter are optional, but at least one of them must be specified.\n\n`address` must be a valid address including a scheme and port.\nCurrently only https and http are supported as scheme.",
        "operationId": "update_leech",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateLeechRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Leech got updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Leech management"],
        "summary": "Delete a leech by its uuid",
        "description": "Delete a leech by its uuid",
        "operationId": "delete_leech",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Leech got deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/leeches/{uuid}/cert": {
      "get": {
        "tags": ["Leech management"],
        "summary": "Generate a new config for the leech",
        "description": "Generate a new config for the leech",
        "operationId": "gen_leech_config",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly generated leech cert",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LeechConfig" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/settings": {
      "get": {
        "tags": ["Settings Management"],
        "summary": "Retrieve the currently active settings",
        "description": "Retrieve the currently active settings",
        "operationId": "get_settings",
        "responses": {
          "200": {
            "description": "Returns the currently active settings",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SettingsFull" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Settings Management"],
        "summary": "Update the settings",
        "description": "Update the settings",
        "operationId": "update_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateSettingsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Settings have been updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/users": {
      "get": {
        "tags": ["User Admin Management"],
        "summary": "Retrieve all users",
        "description": "Retrieve all users",
        "operationId": "get_all_users_admin",
        "responses": {
          "200": {
            "description": "Returns all users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListFullUsers" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["User Admin Management"],
        "summary": "Create a user",
        "description": "Create a user",
        "operationId": "create_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User got created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/users/{uuid}": {
      "get": {
        "tags": ["User Admin Management"],
        "summary": "Retrieve a user by its uuid",
        "description": "Retrieve a user by its uuid",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullUser" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["User Admin Management"],
        "summary": "Delete a user by its uuid",
        "description": "Delete a user by its uuid",
        "operationId": "delete_user",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "User got deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/wordlists": {
      "get": {
        "tags": ["Wordlist management"],
        "summary": "Get a list of all wordlists including their paths",
        "description": "Get a list of all wordlists including their paths",
        "operationId": "get_all_wordlists_admin",
        "responses": {
          "200": {
            "description": "List of all wordlists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListWordlistsAdmin" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Wordlist management"],
        "summary": "Create a new wordlist",
        "description": "Create a new wordlist",
        "operationId": "create_wordlist_admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWordlistRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Wordlist got created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/wordlists/{uuid}": {
      "put": {
        "tags": ["Wordlist management"],
        "summary": "Update an existing wordlist",
        "description": "Update an existing wordlist",
        "operationId": "update_wordlist_admin",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateWordlistRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Wordlist got updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Wordlist management"],
        "summary": "Delete an existing wordlist",
        "description": "Delete an existing wordlist",
        "operationId": "delete_wordlist_admin",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Wordlist got deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/workspaces": {
      "get": {
        "tags": ["Admin Workspaces"],
        "summary": "Retrieve all workspaces",
        "description": "Retrieve all workspaces",
        "operationId": "get_all_workspaces_admin",
        "responses": {
          "200": {
            "description": "Returns all workspaces",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListWorkspaces" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/admin/workspaces/{uuid}": {
      "get": {
        "tags": ["Admin Workspaces"],
        "summary": "Retrieve a workspace by id",
        "description": "Retrieve a workspace by id",
        "operationId": "get_workspace_admin",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the workspace with the given id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullWorkspace" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/apiKeys": {
      "get": {
        "tags": ["Api Keys"],
        "summary": "Retrieve all api keys",
        "description": "Retrieve all api keys",
        "operationId": "get_api_keys",
        "responses": {
          "200": {
            "description": "The uses api keys",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListApiKeys" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Api Keys"],
        "summary": "Create new api key",
        "description": "Create new api key",
        "operationId": "create_api_key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateApiKeyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Api key was created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/apiKeys/{uuid}": {
      "put": {
        "tags": ["Api Keys"],
        "summary": "Update an api key by its id",
        "description": "Update an api key by its id\n\nAll parameter are optional, but at least one of them must be specified.",
        "operationId": "update_api_key",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateApiKeyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Api key got updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Api Keys"],
        "summary": "Delete an existing api key",
        "description": "Delete an existing api key",
        "operationId": "delete_api_key",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Api key got deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve all attacks the user has access to",
        "description": "Retrieve all attacks the user has access to",
        "operationId": "get_all_attacks",
        "responses": {
          "200": {
            "description": "Retrieve a list of all attacks the user has access to",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListAttacks" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/bruteforceSubdomains": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Bruteforce subdomains through a DNS wordlist attack",
        "description": "Bruteforce subdomains through a DNS wordlist attack\n\nEnumerate possible subdomains by querying a DNS server with constructed domains.\nSee [OWASP](https://owasp.org/www-community/attacks/Brute_force_attack) for further information.",
        "operationId": "bruteforce_subdomains",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BruteforceSubdomainsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/dnsResolution": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Perform domain name resolution",
        "description": "Perform domain name resolution",
        "operationId": "dns_resolution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DnsResolutionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/dnsTxtScan": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Perform DNS TXT scanning & parsing",
        "description": "Perform DNS TXT scanning & parsing",
        "operationId": "dns_txt_scan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DnsTxtScanRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/hostsAlive": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Check if hosts are reachable",
        "description": "Check if hosts are reachable\n\nJust an ICMP scan for now to see which targets respond.\n\nAll intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.",
        "operationId": "hosts_alive_check",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/HostsAliveRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/queryCertificateTransparency": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Query a certificate transparency log collector.",
        "description": "Query a certificate transparency log collector.\n\nFor further information, see [the explanation](https://certificate.transparency.dev/).\n\nCertificate transparency can be used to find subdomains or related domains.\n\n`retry_interval` is specified in milliseconds.",
        "operationId": "query_certificate_transparency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryCertificateTransparencyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/queryDehashed": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Query the [dehashed](https://dehashed.com/) API.",
        "description": "Query the [dehashed](https://dehashed.com/) API.\nIt provides email, password, credit cards and other types of information from leak-databases.\n\nNote that you are only able to query the API if you have bought access and have a running\nsubscription saved in kraken.",
        "operationId": "query_dehashed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QueryDehashedRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/scanTcpPorts": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Start a tcp port scan",
        "description": "Start a tcp port scan\n\n`exclude` accepts a list of ip networks in CIDR notation.\n\nAll intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.\n\nSet `max_retries` to 0 if you don't want to try a port more than 1 time.",
        "operationId": "scan_tcp_ports",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ScanTcpPortsRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/serviceDetection": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Perform service detection on a ip and port combination",
        "description": "Perform service detection on a ip and port combination",
        "operationId": "service_detection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDetectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/udpServiceDetection": {
      "post": {
        "tags": ["Attacks"],
        "summary": "Perform UDP service detection on an ip on a list of ports.",
        "description": "Perform UDP service detection on an ip on a list of ports.\n\nAll intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.\n\nSet `max_retries` to 0 if you don't want to try a port more than 1 time.",
        "operationId": "udp_service_detection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UdpServiceDetectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Attack scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve an attack by id",
        "description": "Retrieve an attack by id",
        "operationId": "get_attack",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the attack",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SimpleAttack" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Attacks"],
        "summary": "Delete an attack and its results",
        "description": "Delete an attack and its results",
        "operationId": "delete_attack",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Attack was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/bruteforceSubdomainsResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a bruteforce subdomains' results by the attack's id",
        "description": "Retrieve a bruteforce subdomains' results by the attack's id",
        "operationId": "get_bruteforce_subdomains_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BruteforceSubdomainsResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/dnsResolutionResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a dns resolution's results by the attack's id",
        "description": "Retrieve a dns resolution's results by the attack's id",
        "operationId": "get_dns_resolution_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsResolutionResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/dnsTxtScanResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a DNS TXT scan's results by the attack's id",
        "description": "Retrieve a DNS TXT scan's results by the attack's id",
        "operationId": "get_dns_txt_scan_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsTxtScanResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/hostAliveResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a host alive's results by the attack's id",
        "description": "Retrieve a host alive's results by the attack's id",
        "operationId": "get_host_alive_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostAliveResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/queryCertificateTransparencyResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a query certificate transparency's results by the attack's id",
        "description": "Retrieve a query certificate transparency's results by the attack's id",
        "operationId": "get_query_certificate_transparency_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCertificateTransparencyResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/queryUnhashedResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a query dehashed's results by the attack's id",
        "description": "Retrieve a query dehashed's results by the attack's id",
        "operationId": "get_query_unhashed_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUnhashedResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/serviceDetectionResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a detect service's results by the attack's id",
        "description": "Retrieve a detect service's results by the attack's id",
        "operationId": "get_service_detection_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDetectionResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/tcpPortScanResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve a tcp port scan's results by the attack's id",
        "description": "Retrieve a tcp port scan's results by the attack's id",
        "operationId": "get_tcp_port_scan_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TcpPortScanResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/attacks/{uuid}/udpServiceDetectionResults": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Retrieve UDP service detection results by the attack's id",
        "description": "Retrieve UDP service detection results by the attack's id",
        "operationId": "get_udp_service_detection_results",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Returns attack's results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UdpServiceDetectionResultsPage"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/auth/finishAuth": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Finishes the authentication with a security key",
        "description": "Finishes the authentication with a security key\n\nUse `startAuth` to retrieve the challenge response data.",
        "operationId": "finish_auth",
        "requestBody": {
          "content": { "application/json": { "schema": { "type": "object" } } },
          "required": true
        },
        "responses": {
          "200": { "description": "2FA Authentication finished" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/finishRegister": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Finish the registration of a security key",
        "description": "Finish the registration of a security key\n\nUse `startRegister` to retrieve the challenge response data.",
        "operationId": "finish_register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FinishRegisterRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "2FA Key registration finished" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login to kraken",
        "description": "Login to kraken",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Login successful" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Log out of this session",
        "description": "Log out of this session\n\nLogs a logged-in user out of his session.",
        "operationId": "logout",
        "responses": {
          "200": { "description": "Logout successful" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/startAuth": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Starts the authentication with a security key",
        "description": "Starts the authentication with a security key\n\nUse the `login` endpoint before calling this one.\n\nProceed with `finishAuth`.",
        "operationId": "start_auth",
        "responses": {
          "200": {
            "description": "2FA Authentication started",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/startRegister": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Start the registration of a security key",
        "description": "Start the registration of a security key\n\nProceed to the `finishRegister` endpoint.",
        "operationId": "start_register",
        "responses": {
          "200": {
            "description": "2FA Key registration started",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/test": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Test the current login state",
        "description": "Test the current login state\n\nYou can use this endpoint to test the current login state of your client.\n\nIf logged in, a 200 without a body is returned.",
        "operationId": "test",
        "responses": {
          "200": { "description": "Logged in" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/v1/findingDefinitions": {
      "get": {
        "tags": ["Knowledge Base"],
        "summary": "Retrieve all finding definitions",
        "description": "Retrieve all finding definitions",
        "operationId": "get_all_finding_definitions",
        "responses": {
          "200": {
            "description": "Retrieved a list of all finding definitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFindingDefinitions"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Knowledge Base"],
        "summary": "Add a definition for a finding",
        "description": "Add a definition for a finding\n\nThese definition serve as reference and knowledge base in kraken.\nThey can be used to create a finding that references a definition and links it to one or\nmultiple aggregations.",
        "operationId": "create_finding_definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFindingDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Finding definition was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/findingDefinitions/{uuid}": {
      "get": {
        "tags": ["Knowledge Base"],
        "summary": "Retrieve a specific finding definition",
        "description": "Retrieve a specific finding definition",
        "operationId": "get_finding_definition",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved a specific finding definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullFindingDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/globalTags": {
      "get": {
        "tags": ["Global Tags"],
        "summary": "Retrieve all global tags",
        "description": "Retrieve all global tags",
        "operationId": "get_all_global_tags",
        "responses": {
          "200": {
            "description": "Retrieve all global tags",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListGlobalTags" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/invitations": {
      "get": {
        "tags": ["Workspace Invitations"],
        "summary": "Retrieve all open invitations to workspaces the currently logged-in user",
        "description": "Retrieve all open invitations to workspaces the currently logged-in user\nhas retrieved",
        "operationId": "get_all_invitations",
        "responses": {
          "200": {
            "description": "Returns all invitations of a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceInvitationList"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/invitations/{uuid}/accept": {
      "post": {
        "tags": ["Workspace Invitations"],
        "summary": "Accept an invitation to a workspace",
        "description": "Accept an invitation to a workspace",
        "operationId": "accept_invitation",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Accept an invitation" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/invitations/{uuid}/decline": {
      "post": {
        "tags": ["Workspace Invitations"],
        "summary": "Decline an invitation to a workspace",
        "description": "Decline an invitation to a workspace",
        "operationId": "decline_invitation",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Decline an invitation" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/oauth/accept/{uuid}": {
      "get": {
        "tags": ["OAuth"],
        "summary": "Endpoint visited by user to grant a requesting application access",
        "description": "Endpoint visited by user to grant a requesting application access",
        "operationId": "accept",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "remember",
            "in": "query",
            "description": "Should kraken remember this decision?",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "302": {
            "description": "The user is redirected back to the requesting client"
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/oauth/deny/{uuid}": {
      "get": {
        "tags": ["OAuth"],
        "summary": "Endpoint visited by user to deny a requesting application access",
        "description": "Endpoint visited by user to deny a requesting application access",
        "operationId": "deny",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "remember",
            "in": "query",
            "description": "Should kraken remember this decision?",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "302": {
            "description": "The user is redirected back to the requesting client"
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/oauth/info/{uuid}": {
      "get": {
        "tags": ["OAuth"],
        "summary": "Queried by the frontend to display information about the oauth request to the user",
        "description": "Queried by the frontend to display information about the oauth request to the user",
        "operationId": "info",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Return information about an ongoing oauth request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OpenRequestInfo" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/oauthDecisions": {
      "get": {
        "tags": ["OAuth Decisions"],
        "summary": "Retrieve a user's remembered oauth decisions",
        "description": "Retrieve a user's remembered oauth decisions",
        "operationId": "get_decisions",
        "responses": {
          "200": {
            "description": "The user's remember oauth decisions",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListOauthDecisions" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/oauthDecisions/{uuid}": {
      "delete": {
        "tags": ["OAuth Decisions"],
        "summary": "Revoke a user's remembered oauth decision",
        "description": "Revoke a user's remembered oauth decision",
        "operationId": "revoke_decision",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Revoked decision" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": ["User Management"],
        "summary": "Request all users",
        "description": "Request all users\n\nThis may be used to create invitations for workspaces",
        "operationId": "get_all_users",
        "responses": {
          "200": {
            "description": "Simple representation of all users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListUsers" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["User Management"],
        "summary": "Retrieve the own user",
        "description": "Retrieve the own user",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Returns the own user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullUser" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["User Management"],
        "summary": "Updates the own user",
        "description": "Updates the own user\n\nAll parameters are optional, but at least one of them must be supplied.",
        "operationId": "update_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateMeRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Changes were applied" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/users/setPassword": {
      "post": {
        "tags": ["User Management"],
        "summary": "Set a new password",
        "description": "Set a new password",
        "operationId": "set_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetPasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Password was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/wordlists": {
      "get": {
        "tags": ["Wordlist"],
        "summary": "Get a list of all wordlist for the user to select from when starting an bruteforce subdomains attack",
        "description": "Get a list of all wordlist for the user to select from when starting an bruteforce subdomains attack",
        "operationId": "get_all_wordlists",
        "responses": {
          "200": {
            "description": "Matched leeches",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListWordlists" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Retrieve all workspaces that the executing user has access to",
        "description": "Retrieve all workspaces that the executing user has access to\n\nFor administration access, look at the `/admin/workspaces` endpoint.",
        "operationId": "get_all_workspaces",
        "responses": {
          "200": {
            "description": "Returns all workspaces that the executing user has access to",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListWorkspaces" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Workspaces"],
        "summary": "Create a new workspace",
        "description": "Create a new workspace",
        "operationId": "create_workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workspace was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Retrieve a workspace by id",
        "description": "Retrieve a workspace by id",
        "operationId": "get_workspace",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullWorkspace" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Workspaces"],
        "summary": "Updates a workspace by its id",
        "description": "Updates a workspace by its id\n\nAll parameter are optional, but at least one of them must be specified.\n\n`name` must not be empty.\n\nYou can set `description` to null to remove the description from the database.\nIf you leave the parameter out, the description will remain unchanged.",
        "operationId": "update_workspace",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Workspace got updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Workspaces"],
        "summary": "Delete a workspace by its id",
        "description": "Delete a workspace by its id",
        "operationId": "delete_workspace",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Workspace was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/attacks": {
      "get": {
        "tags": ["Attacks"],
        "summary": "Query all attacks of a workspace",
        "description": "Query all attacks of a workspace",
        "operationId": "get_workspace_attacks",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of all attacks of a workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListAttacks" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/domains": {
      "post": {
        "tags": ["Domains"],
        "summary": "Manually add a domain",
        "description": "Manually add a domain",
        "operationId": "create_domain",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Domain was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/domains/all": {
      "post": {
        "tags": ["Domains"],
        "summary": "Retrieve all domains of a specific workspace",
        "description": "Retrieve all domains of a specific workspace",
        "operationId": "get_all_domains",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GetAllDomainsQuery" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve all domains of a workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainResultsPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/hosts": {
      "post": {
        "tags": ["Hosts"],
        "summary": "Manually add a host",
        "description": "Manually add a host",
        "operationId": "create_host",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateHostRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Host was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/hosts/all": {
      "post": {
        "tags": ["Hosts"],
        "summary": "Retrieve all hosts.",
        "description": "Retrieve all hosts.\n\nHosts are created out of aggregating data or by user input.\nThey represent a single host and can be created by providing an IP address",
        "operationId": "get_all_hosts",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GetAllHostsQuery" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All hosts in the workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HostResultsPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/invitations": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Query all open invitations to a workspace",
        "description": "Query all open invitations to a workspace",
        "operationId": "get_all_workspace_invitations",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all open invitations to the workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceInvitationList"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Workspaces"],
        "summary": "Invite a user to the workspace",
        "description": "Invite a user to the workspace\n\nThis action can only be invoked by the owner of a workspace",
        "operationId": "create_invitation",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteToWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "The user was invited." },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/ports": {
      "post": {
        "tags": ["Ports"],
        "summary": "Manually add a port",
        "description": "Manually add a port",
        "operationId": "create_port",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePortRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Port was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/ports/all": {
      "post": {
        "tags": ["Ports"],
        "summary": "List the ports of a workspace",
        "description": "List the ports of a workspace",
        "operationId": "get_all_ports",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GetAllPortsQuery" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve all ports of a workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PortResultsPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/search": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Query all searches",
        "description": "Query all searches",
        "operationId": "get_searches",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchesResultPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Workspaces"],
        "summary": "Search through a workspaces' data",
        "description": "Search through a workspaces' data",
        "operationId": "search",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search has been scheduled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/services": {
      "post": {
        "tags": ["Services"],
        "summary": "Manually add a service",
        "description": "Manually add a service",
        "operationId": "create_service",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateServiceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/services/all": {
      "post": {
        "tags": ["Services"],
        "summary": "List the services of a workspace",
        "description": "List the services of a workspace",
        "operationId": "get_all_services",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GetAllServicesQuery" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieve all services of a workspace",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceResultsPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/tags": {
      "get": {
        "tags": ["Workspace Tags"],
        "summary": "Retrieve all workspace tags",
        "description": "Retrieve all workspace tags",
        "operationId": "get_all_workspace_tags",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all workspace tags",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListWorkspaceTags" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["Workspace Tags"],
        "summary": "Create a workspace tag.",
        "description": "Create a workspace tag.",
        "operationId": "create_workspace_tag",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workspace tag was created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UuidResponse" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{uuid}/transfer": {
      "post": {
        "tags": ["Workspaces"],
        "summary": "Transfer ownership to another account",
        "description": "Transfer ownership to another account\n\nYou will loose access to the workspace.",
        "operationId": "transfer_ownership",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Workspace was transferred" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/domains/{d_uuid}": {
      "get": {
        "tags": ["Domains"],
        "summary": "Retrieve all information about a single domain",
        "description": "Retrieve all information about a single domain",
        "operationId": "get_domain",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "d_uuid",
            "in": "path",
            "description": "The domain's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the selected domain",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullDomain" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Domains"],
        "summary": "Update a domain",
        "description": "Update a domain\n\nYou must include at least on parameter",
        "operationId": "update_domain",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "d_uuid",
            "in": "path",
            "description": "The domain's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Domain was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Domains"],
        "summary": "Delete the domain",
        "description": "Delete the domain\n\nThis only deletes the aggregation. The raw results are still in place",
        "operationId": "delete_domain",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "d_uuid",
            "in": "path",
            "description": "The domain's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Domain was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/domains/{d_uuid}/relations": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get a host's direct relations",
        "description": "Get a host's direct relations",
        "operationId": "get_domain_relations",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "d_uuid",
            "in": "path",
            "description": "The domain's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The domain's relations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainRelations" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/domains/{d_uuid}/sources": {
      "get": {
        "tags": ["Domains"],
        "summary": "Get all data sources which referenced this domain",
        "description": "Get all data sources which referenced this domain",
        "operationId": "get_domain_sources",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "d_uuid",
            "in": "path",
            "description": "The domain's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The domain's sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullAggregationSource"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/hosts/{h_uuid}": {
      "get": {
        "tags": ["Hosts"],
        "summary": "Retrieve all information about a single host",
        "description": "Retrieve all information about a single host",
        "operationId": "get_host",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "h_uuid",
            "in": "path",
            "description": "Host uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the selected host",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullHost" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Hosts"],
        "summary": "Update a host",
        "description": "Update a host\n\nYou must include at least on parameter",
        "operationId": "update_host",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "h_uuid",
            "in": "path",
            "description": "Host uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateHostRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Host was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Hosts"],
        "summary": "Delete the host",
        "description": "Delete the host\n\nThis only deletes the aggregation. The raw results are still in place",
        "operationId": "delete_host",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "h_uuid",
            "in": "path",
            "description": "Host uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Host was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/hosts/{h_uuid}/relations": {
      "get": {
        "tags": ["Hosts"],
        "summary": "Get a host's direct relations",
        "description": "Get a host's direct relations",
        "operationId": "get_host_relations",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "h_uuid",
            "in": "path",
            "description": "Host uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The host's relations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HostRelations" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/hosts/{h_uuid}/sources": {
      "get": {
        "tags": ["Hosts"],
        "summary": "Get all data sources which referenced this host",
        "description": "Get all data sources which referenced this host",
        "operationId": "get_host_sources",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "h_uuid",
            "in": "path",
            "description": "Host uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The host's sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullAggregationSource"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/invitations/{i_uuid}": {
      "delete": {
        "tags": ["Workspaces"],
        "summary": "Retract an invitation to the workspace",
        "description": "Retract an invitation to the workspace\n\nThis action can only be invoked by the owner of a workspace",
        "operationId": "retract_invitation",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The UUID of the workspace",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "i_uuid",
            "in": "path",
            "description": "The UUID of the invitation",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "The invitation was retracted." },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/ports/{p_uuid}": {
      "get": {
        "tags": ["Ports"],
        "summary": "Retrieve all information about a single port",
        "description": "Retrieve all information about a single port",
        "operationId": "get_port",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "p_uuid",
            "in": "path",
            "description": "The port's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the selected port",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullPort" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Ports"],
        "summary": "Update a port",
        "description": "Update a port\n\nYou must include at least on parameter",
        "operationId": "update_port",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "p_uuid",
            "in": "path",
            "description": "The port's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePortRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Port was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Ports"],
        "summary": "Delete the port",
        "description": "Delete the port\n\nThis only deletes the aggregation. The raw results are still in place",
        "operationId": "delete_port",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "p_uuid",
            "in": "path",
            "description": "The port's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Port was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/ports/{p_uuid}/relations": {
      "get": {
        "tags": ["Ports"],
        "summary": "Get a port's direct relations",
        "description": "Get a port's direct relations",
        "operationId": "get_port_relations",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "p_uuid",
            "in": "path",
            "description": "The port's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The port's relations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PortRelations" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/ports/{p_uuid}/sources": {
      "get": {
        "tags": ["Ports"],
        "summary": "Get all data sources which referenced this port",
        "description": "Get all data sources which referenced this port",
        "operationId": "get_port_sources",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "p_uuid",
            "in": "path",
            "description": "The port's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The port's sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullAggregationSource"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/search/{s_uuid}": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Retrieve results for a search by it's uuid",
        "description": "Retrieve results for a search by it's uuid",
        "operationId": "get_search_results",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The UUID of the workspace",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The UUID of the search",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 1 },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Position in the whole list to start retrieving from",
            "required": true,
            "schema": { "type": "integer", "format": "int64", "minimum": 0 },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchResultPage" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/services/{s_uuid}": {
      "get": {
        "tags": ["Services"],
        "summary": "Retrieve all information about a single service",
        "description": "Retrieve all information about a single service",
        "operationId": "get_service",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The service's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the selected service",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullService" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "put": {
        "tags": ["Services"],
        "summary": "Update a service",
        "description": "Update a service\n\nYou must include at least on parameter",
        "operationId": "update_service",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The service's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateServiceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Service was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Services"],
        "summary": "Delete the service",
        "description": "Delete the service\n\nThis only deletes the aggregation. The raw results are still in place",
        "operationId": "delete_service",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The service's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Service was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/services/{s_uuid}/relations": {
      "get": {
        "tags": ["Services"],
        "summary": "Get a service's direct relations",
        "description": "Get a service's direct relations",
        "operationId": "get_service_relations",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The service's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The service's relations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceRelations" }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/services/{s_uuid}/sources": {
      "get": {
        "tags": ["Services"],
        "summary": "Get all data sources which referenced this service",
        "description": "Get all data sources which referenced this service",
        "operationId": "get_service_sources",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "The workspace's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "s_uuid",
            "in": "path",
            "description": "The service's uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "The service's sources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullAggregationSource"
                }
              }
            }
          },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/workspaces/{w_uuid}/tags/{t_uuid}": {
      "put": {
        "tags": ["Workspace Tags"],
        "summary": "Update a workspace tag",
        "description": "Update a workspace tag\n\nOne of the options must be set\n\nRequires privileges to access the workspace this tags belongs to.",
        "operationId": "update_workspace_tag",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "t_uuid",
            "in": "path",
            "description": "Tag uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateWorkspaceTag" }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Workspace tag was updated" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      },
      "delete": {
        "tags": ["Workspace Tags"],
        "summary": "Delete a workspace tag",
        "description": "Delete a workspace tag\n\nRequires privileges to access the workspace this tag belongs to.",
        "operationId": "delete_workspace_tag",
        "parameters": [
          {
            "name": "w_uuid",
            "in": "path",
            "description": "Workspace uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "t_uuid",
            "in": "path",
            "description": "Tag uuid",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Workspace tag was deleted" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/api/v1/ws": {
      "get": {
        "tags": ["Websocket"],
        "summary": "Start a websocket connection",
        "description": "Start a websocket connection\n\nA heartbeat PING packet is sent constantly (every 10s).\nIf no response is retrieved within 30s of the last transmission, the socket\nwill be closed.",
        "operationId": "websocket",
        "responses": {
          "101": { "description": "Websocket connection established" },
          "400": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiErrorResponse" }
              }
            }
          }
        },
        "security": [{ "api_key": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "AggregationType": {
        "type": "string",
        "description": "The different types of aggregations",
        "enum": ["Domain", "Host", "Service", "Port"]
      },
      "ApiErrorResponse": {
        "type": "object",
        "description": "Representation of an error response\n\n`status_code` holds the error code, `message` a human readable description of the error",
        "required": ["status_code", "message"],
        "properties": {
          "status_code": { "$ref": "#/components/schemas/ApiStatusCode" },
          "message": {
            "type": "string",
            "description": "A human readable description of the error",
            "example": "Error message will be here"
          }
        }
      },
      "ApiStatusCode": {
        "type": "integer",
        "description": "This type holds all possible error types that can be returned by the API.\n\nNumbers between 1000 and 1999 (inclusive) are client errors that can be handled by the client.\nNumbers between 2000 and 2999 (inclusive) are server errors.",
        "default": 1000,
        "enum": [
          1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
          1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
          1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 2000, 2001,
          2002, 2003, 2004, 2005
        ],
        "example": 1000
      },
      "AttackType": {
        "type": "string",
        "description": "The type of an attack",
        "enum": [
          "Undefined",
          "BruteforceSubdomains",
          "TcpPortScan",
          "QueryCertificateTransparency",
          "QueryUnhashed",
          "HostAlive",
          "ServiceDetection",
          "UdpServiceDetection",
          "DnsResolution",
          "DnsTxtScan",
          "UdpPortScan",
          "ForcedBrowsing",
          "OSDetection",
          "VersionDetection",
          "AntiPortScanningDetection"
        ]
      },
      "BruteforceSubdomainsRequest": {
        "type": "object",
        "description": "The settings of a subdomain bruteforce request",
        "required": [
          "domain",
          "wordlist_uuid",
          "concurrent_limit",
          "workspace_uuid"
        ],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "description": "Domain to construct subdomains for",
            "example": "example.com"
          },
          "wordlist_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The wordlist to use"
          },
          "concurrent_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The concurrent task limit",
            "example": 100,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "BruteforceSubdomainsResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleBruteforceSubdomainsResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "CertificateTransparencyEntry": {
        "type": "object",
        "description": "Entry of certificate transparency results",
        "required": [
          "serial_number",
          "issuer_name",
          "common_name",
          "value_names"
        ],
        "properties": {
          "serial_number": {
            "type": "string",
            "description": "The serial number of the certificate"
          },
          "issuer_name": {
            "type": "string",
            "description": "The name of the issuer for the certificate"
          },
          "common_name": {
            "type": "string",
            "description": "The common name of the certificate"
          },
          "value_names": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The value names of the certificate"
          },
          "not_before": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time after the certificate is valid",
            "nullable": true
          },
          "not_after": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time before the certificate is valid",
            "nullable": true
          }
        }
      },
      "Change": {
        "type": "object",
        "description": "Defines a change\n\nColumns and lines are treated as 1-indexed",
        "required": [
          "text",
          "start_column",
          "end_column",
          "start_line",
          "end_line"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The text that should be set to the range given by the other values"
          },
          "start_column": {
            "type": "integer",
            "format": "int64",
            "description": "Start of the column",
            "minimum": 1
          },
          "end_column": {
            "type": "integer",
            "format": "int64",
            "description": "End of the column",
            "minimum": 1
          },
          "start_line": {
            "type": "integer",
            "format": "int64",
            "description": "Starting line number",
            "minimum": 1
          },
          "end_line": {
            "type": "integer",
            "format": "int64",
            "description": "Ending line number",
            "minimum": 1
          }
        }
      },
      "Color": {
        "type": "object",
        "description": "Color value",
        "required": ["r", "g", "b", "a"],
        "properties": {
          "r": {
            "type": "integer",
            "format": "int32",
            "description": "Red value",
            "minimum": 0
          },
          "g": {
            "type": "integer",
            "format": "int32",
            "description": "Green value",
            "minimum": 0
          },
          "b": {
            "type": "integer",
            "format": "int32",
            "description": "Blue value",
            "minimum": 0
          },
          "a": {
            "type": "integer",
            "format": "int32",
            "description": "Alpha value",
            "minimum": 0
          }
        }
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "Request to create a new api key",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "A descriptive name helping the user to identify the key",
            "example": "Leech on my local machine"
          }
        }
      },
      "CreateAppRequest": {
        "type": "object",
        "description": "Create a new oauth application",
        "required": ["name", "redirect_uri"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the application",
            "example": "Trustworthy application"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect url of the application",
            "example": "http://127.0.0.1:8080"
          }
        }
      },
      "CreateDomainRequest": {
        "type": "object",
        "description": "The request to manually add a domain",
        "required": ["domain"],
        "properties": {
          "domain": {
            "type": "string",
            "description": "The domain to add",
            "example": "kraken.test"
          }
        }
      },
      "CreateFindingDefinitionRequest": {
        "type": "object",
        "description": "The request to create a new finding definition",
        "required": [
          "name",
          "severity",
          "summary",
          "description",
          "impact",
          "remediation",
          "references"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new finding definition\n\nThis must be unique"
          },
          "severity": { "$ref": "#/components/schemas/FindingSeverity" },
          "summary": {
            "type": "string",
            "description": "Short summary of the finding"
          },
          "cve": {
            "type": "string",
            "description": "Optional linked CVE",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The full description of the finding\n\nThis should include the cause of the finding"
          },
          "impact": {
            "type": "string",
            "description": "The impact of the finding in general.\n\nThe impact for a specific environment should be described in the linked finding"
          },
          "remediation": {
            "type": "string",
            "description": "How is remediation possible in general?\n\nFor example when using weak ciphers, the easiest remediation might be to just\nrework the process of creating a new certificate and use safer parameters"
          },
          "references": {
            "type": "string",
            "description": "Any references to get more information about the definition of a finding.\n\nCan link to resources like Mitre's Attack or CME explanations, etc."
          }
        }
      },
      "CreateGlobalTagRequest": {
        "type": "object",
        "description": "The request to create a global tag",
        "required": ["name", "color"],
        "properties": {
          "name": { "type": "string", "description": "Name of the tag" },
          "color": { "$ref": "#/components/schemas/Color" }
        }
      },
      "CreateHostRequest": {
        "type": "object",
        "description": "The request to manually add a host",
        "required": ["ip_addr", "certainty"],
        "properties": {
          "ip_addr": {
            "type": "string",
            "description": "The host's ip address",
            "example": "127.0.0.1"
          },
          "certainty": { "$ref": "#/components/schemas/ManualHostCertainty" }
        }
      },
      "CreateLeechRequest": {
        "type": "object",
        "description": "The request to create a new leech",
        "required": ["name", "address"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the leech",
            "example": "leech-01"
          },
          "address": {
            "type": "string",
            "description": "Address of the leech with schema",
            "example": "https://10.13.37:8081"
          },
          "description": {
            "type": "string",
            "description": "Description of the leech",
            "example": "The first leech in a private net",
            "nullable": true
          }
        }
      },
      "CreatePortRequest": {
        "type": "object",
        "description": "The request to manually add a port",
        "required": ["ip_addr", "port", "certainty", "protocol"],
        "properties": {
          "ip_addr": {
            "type": "string",
            "description": "The ip address the port is open on",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "The port to add",
            "example": "8080",
            "minimum": 0
          },
          "certainty": { "$ref": "#/components/schemas/ManualPortCertainty" },
          "protocol": { "$ref": "#/components/schemas/PortProtocol" }
        }
      },
      "CreateServiceRequest": {
        "type": "object",
        "description": "The request to manually add a service",
        "required": ["name", "certainty", "host"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The service's name",
            "example": "django"
          },
          "certainty": {
            "$ref": "#/components/schemas/ManualServiceCertainty"
          },
          "host": {
            "type": "string",
            "description": "The ip address the service runs on",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "An optional port the service runs on\n\nIf set, you must specify protocol",
            "example": "8080",
            "nullable": true,
            "minimum": 0
          },
          "protocol": {
            "allOf": [{ "$ref": "#/components/schemas/PortProtocol" }],
            "nullable": true
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "The request to create a user",
        "required": ["username", "display_name", "password", "permission"],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username",
            "example": "user123"
          },
          "display_name": {
            "type": "string",
            "description": "The displayname",
            "example": "Anon"
          },
          "password": {
            "type": "string",
            "description": "The password that should be set",
            "example": "super-secure-password"
          },
          "permission": { "$ref": "#/components/schemas/UserPermission" }
        }
      },
      "CreateWordlistRequest": {
        "type": "object",
        "description": "Arguments for creating a new wordlist",
        "required": ["name", "description", "path"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The wordlist's name to be displayed select buttons",
            "example": "subdomains-top1million-5000.txt"
          },
          "description": {
            "type": "string",
            "description": "A description explaining the wordlist's intended use case",
            "example": "List of 5000 subdomains"
          },
          "path": {
            "type": "string",
            "description": "The file path the wordlist is deployed under on each leech",
            "example": "/opt/wordlists/Discovery/DNS/subdomains-top1million-5000.txt"
          }
        }
      },
      "CreateWorkspaceRequest": {
        "type": "object",
        "description": "The request to create a new workspace",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the workspace",
            "example": "secure-workspace"
          },
          "description": {
            "type": "string",
            "description": "The description of the workspace",
            "example": "This workspace is super secure and should not be looked at!!",
            "nullable": true
          }
        }
      },
      "CreateWorkspaceTagRequest": {
        "type": "object",
        "description": "The request to create a workspace tag",
        "required": ["name", "color"],
        "properties": {
          "name": { "type": "string", "description": "Name of the tag" },
          "color": { "$ref": "#/components/schemas/Color" }
        }
      },
      "CursorPosition": {
        "type": "object",
        "description": "Defines this position of a cursor",
        "required": ["line", "column"],
        "properties": {
          "line": {
            "type": "integer",
            "format": "int64",
            "description": "The line the cursor was placed in",
            "minimum": 1
          },
          "column": {
            "type": "integer",
            "format": "int64",
            "description": "The column the cursor was placed in",
            "minimum": 1
          }
        }
      },
      "DnsResolutionRequest": {
        "type": "object",
        "description": "Request to resolve domains",
        "required": ["targets", "concurrent_limit", "workspace_uuid"],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "targets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The domains to resolve",
            "example": ["example.com", "example.org"]
          },
          "concurrent_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The concurrent task limit",
            "example": 2,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "DnsResolutionResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleDnsResolutionResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "DnsTxtScanEntry": {
        "oneOf": [
          {
            "type": "object",
            "required": ["ServiceHint"],
            "properties": {
              "ServiceHint": {
                "type": "object",
                "description": "Just wraps txt_type, the DNS rule is usually more exact to what is actually written in DNS",
                "required": ["uuid", "created_at", "rule", "txt_type"],
                "properties": {
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The primary key"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The point in time, this entry was produced"
                  },
                  "rule": {
                    "type": "string",
                    "description": "The rule that was matched for this scan result, usually the whole TXT record."
                  },
                  "txt_type": {
                    "$ref": "#/components/schemas/DnsTxtScanServiceHintType"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["Spf"],
            "properties": {
              "Spf": {
                "type": "object",
                "description": "Wraps a single SPF rule part, the rule is reconstructed from the parsed value",
                "required": [
                  "uuid",
                  "created_at",
                  "rule",
                  "spf_type",
                  "spf_ip"
                ],
                "properties": {
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The primary key"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The point in time, this entry was produced"
                  },
                  "rule": {
                    "type": "string",
                    "description": "A single SPF rule part that was matched for this object."
                  },
                  "spf_type": {
                    "$ref": "#/components/schemas/DnsTxtScanSpfType"
                  },
                  "spf_ip": {
                    "type": "string",
                    "description": "If the txt_type is a SPF type that includes an IP (or whole IP range), it will be set here.",
                    "example": "127.0.0.1/24"
                  },
                  "spf_domain": {
                    "type": "string",
                    "description": "If the txt_type is a SPF type that includes a domain, it will be set here.",
                    "nullable": true
                  },
                  "spf_domain_ipv4_cidr": {
                    "type": "integer",
                    "format": "int32",
                    "description": "If the txt_type is a SPF type that includes a domain, this is its ipv4 CIDR.",
                    "nullable": true
                  },
                  "spf_domain_ipv6_cidr": {
                    "type": "integer",
                    "format": "int32",
                    "description": "If the txt_type is a SPF type that includes a domain, this is its ipv6 CIDR.",
                    "nullable": true
                  }
                }
              }
            }
          }
        ],
        "description": "A single detailed entry for a given DNS TXT scan result. May be a hint at service usage / ownership or contain\nparsed SPF rules."
      },
      "DnsTxtScanRequest": {
        "type": "object",
        "description": "Request to do DNS TXT scanning & parsing",
        "required": ["targets", "workspace_uuid"],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "targets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The domains to resolve",
            "example": ["example.com", "example.org"]
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "DnsTxtScanResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullDnsTxtScanResult" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "DnsTxtScanServiceHintType": {
        "type": "string",
        "description": "The type of DNS TXT scan result for service hints",
        "enum": [
          "HasGoogleAccount",
          "HasGlobalsignAccount",
          "HasGlobalsignSMime",
          "HasDocusignAccount",
          "HasAppleAccount",
          "HasFacebookAccount",
          "HasHubspotAccount",
          "HasMSDynamics365",
          "HasStripeAccount",
          "HasOneTrustSso",
          "HasBrevoAccount",
          "OwnsAtlassianAccounts",
          "OwnsZoomAccounts",
          "EmailProtonMail"
        ]
      },
      "DnsTxtScanSpfType": {
        "type": "string",
        "description": "The type of DNS TXT scan result for SPF rules",
        "enum": [
          "All",
          "Include",
          "A",
          "Mx",
          "Ptr",
          "Ip",
          "Exists",
          "Redirect",
          "Explanation",
          "Modifier"
        ]
      },
      "DnsTxtScanSummaryType": {
        "type": "string",
        "description": "Indicates what children the DnsTxtScanAttackResult has",
        "enum": ["ServiceHints", "Spf"]
      },
      "DomainCertainty": {
        "type": "string",
        "description": "The certainty of a domain",
        "enum": ["Unverified", "Verified"]
      },
      "DomainOrNetwork": {
        "oneOf": [
          {
            "type": "string",
            "description": "A ip address / network",
            "example": "10.13.37.10"
          },
          {
            "type": "string",
            "description": "A domain name",
            "example": "kraken.test"
          }
        ],
        "description": "Either an ip address / network or a domain name"
      },
      "DomainRelations": {
        "type": "object",
        "description": "A domain's direct relations",
        "required": [
          "source_domains",
          "target_domains",
          "direct_hosts",
          "indirect_hosts"
        ],
        "properties": {
          "source_domains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleDomain" },
            "description": "All domains which contain a `CNAME` record with this domain"
          },
          "target_domains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleDomain" },
            "description": "All domains this domain has `CNAME` records to"
          },
          "direct_hosts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleHost" },
            "description": "All hosts this domain has an `A` or `AAAA` record for"
          },
          "indirect_hosts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleHost" },
            "description": "All hosts any `target_domains` resolves to"
          }
        }
      },
      "DomainResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullDomain" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "EditorTarget": {
        "oneOf": [
          {
            "type": "object",
            "required": ["FindingDefinition"],
            "properties": {
              "FindingDefinition": {
                "type": "object",
                "description": "The editor for a [FindingDefinition]",
                "required": ["finding_definition", "finding_section"],
                "properties": {
                  "finding_definition": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The finding definition that is active"
                  },
                  "finding_section": {
                    "$ref": "#/components/schemas/FindingSection"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["Finding"],
            "properties": {
              "Finding": {
                "type": "object",
                "description": "The editor for the `user_details` in [Finding]",
                "required": ["finding"],
                "properties": {
                  "finding": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Uuid of the [Finding]"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["FindingAffected"],
            "properties": {
              "FindingAffected": {
                "type": "object",
                "description": "The editor for the `user_details` in [FindingAffected]",
                "required": ["finding", "affected"],
                "properties": {
                  "finding": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Uuid of the [Finding]"
                  },
                  "affected": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Uuid of the [FindingAffected]"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["WorkspaceNotes"],
            "properties": {
              "WorkspaceNotes": {
                "type": "object",
                "description": "The editor for notes in a [Workspace]",
                "required": ["workspace"],
                "properties": {
                  "workspace": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The uuid of the workspace"
                  }
                }
              }
            }
          }
        ],
        "description": "The target of the editor\n\nUsed to specify the target for the editor, for example the\nspecific section in a [FindingDefinition]"
      },
      "FindingSection": {
        "type": "string",
        "description": "The section that was edited",
        "enum": [
          "Summary",
          "Description",
          "Impact",
          "Remediation",
          "References"
        ]
      },
      "FindingSeverity": {
        "type": "string",
        "description": "The severity of a finding",
        "enum": ["Okay", "Low", "Medium", "High", "Critical"]
      },
      "FinishRegisterRequest": {
        "allOf": [
          {
            "type": "object",
            "description": "The public key credentials register request"
          },
          {
            "type": "object",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the key",
                "example": "my-security-key-01"
              }
            }
          }
        ],
        "description": "The request to finish the registration of a security key"
      },
      "FullAggregationSource": {
        "type": "object",
        "description": "All data sources which contributed to an aggregated model",
        "required": ["attacks", "manual_insert"],
        "properties": {
          "attacks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SourceAttack" },
            "description": "All attack which contributed to an aggregated model"
          },
          "manual_insert": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ManualInsert" },
            "description": "All manual inserts which contributed to an aggregated model"
          }
        }
      },
      "FullApiKey": {
        "type": "object",
        "description": "A representation of a full api key",
        "required": ["uuid", "name", "key"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The key's identifier"
          },
          "name": {
            "type": "string",
            "description": "A descriptive name helping the user to identify the key",
            "example": "Leech on my local machine"
          },
          "key": {
            "type": "string",
            "description": "The actual key's value",
            "example": "fsn83r0jfis84nfthw..."
          }
        }
      },
      "FullDnsTxtScanResult": {
        "type": "object",
        "description": "The full representation of a dns txt scan result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "domain",
          "collection_type",
          "entries"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "domain": { "type": "string", "description": "The source address" },
          "collection_type": {
            "$ref": "#/components/schemas/DnsTxtScanSummaryType"
          },
          "entries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DnsTxtScanEntry" },
            "description": "List of result entries. The kind depends on the `collection_type` in this object."
          }
        }
      },
      "FullDomain": {
        "type": "object",
        "description": "A full representation of a domain in a workspace",
        "required": [
          "uuid",
          "domain",
          "comment",
          "workspace",
          "tags",
          "sources",
          "created_at",
          "certainty"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the domain"
          },
          "domain": {
            "type": "string",
            "description": "The domain's name",
            "example": "example.com"
          },
          "comment": {
            "type": "string",
            "description": "A comment",
            "example": "This is a important domain!"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this domain is in"
          },
          "tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTag" },
            "description": "The list of tags this domain has attached to"
          },
          "sources": { "$ref": "#/components/schemas/SimpleAggregationSource" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          },
          "certainty": { "$ref": "#/components/schemas/DomainCertainty" }
        }
      },
      "FullFindingDefinition": {
        "type": "object",
        "description": "The full definition of a finding",
        "required": [
          "uuid",
          "name",
          "severity",
          "summary",
          "description",
          "impact",
          "remediation",
          "references",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of a finding definition"
          },
          "name": {
            "type": "string",
            "description": "Name of the new finding definition"
          },
          "severity": { "$ref": "#/components/schemas/FindingSeverity" },
          "summary": {
            "type": "string",
            "description": "Short summary of the finding"
          },
          "cve": {
            "type": "string",
            "description": "Optional linked CVE",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The full description of the finding"
          },
          "impact": {
            "type": "string",
            "description": "The impact of the finding in general."
          },
          "remediation": {
            "type": "string",
            "description": "How to remediate the finding"
          },
          "references": {
            "type": "string",
            "description": "Any references to get more information about the definition of a finding."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this finding definition was created"
          }
        }
      },
      "FullGlobalTag": {
        "type": "object",
        "description": "The full representation of a full",
        "required": ["uuid", "name", "color"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the tag"
          },
          "name": { "type": "string", "description": "The name of the tag" },
          "color": { "$ref": "#/components/schemas/Color" }
        }
      },
      "FullHost": {
        "type": "object",
        "description": "The full representation of a host",
        "required": [
          "uuid",
          "ip_addr",
          "os_type",
          "comment",
          "workspace",
          "tags",
          "sources",
          "created_at",
          "certainty"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the host"
          },
          "ip_addr": {
            "type": "string",
            "description": "The ip address of the host",
            "example": "172.0.0.1"
          },
          "os_type": { "$ref": "#/components/schemas/OsType" },
          "response_time": {
            "type": "integer",
            "format": "int32",
            "description": "Response time in ms",
            "nullable": true
          },
          "comment": { "type": "string", "description": "A comment" },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this host is in"
          },
          "tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTag" },
            "description": "The list of tags this host has attached to"
          },
          "sources": { "$ref": "#/components/schemas/SimpleAggregationSource" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          },
          "certainty": { "$ref": "#/components/schemas/HostCertainty" }
        }
      },
      "FullOauthClient": {
        "type": "object",
        "description": "A complete version of a workspace",
        "required": ["uuid", "name", "redirect_uri", "secret"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the client"
          },
          "name": {
            "type": "string",
            "description": "The name of the client",
            "example": "Trustworthy application"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect url of the client",
            "example": "http://127.0.0.1:8080"
          },
          "secret": {
            "type": "string",
            "description": "The secret of the client",
            "example": "IPSPL29BSDw5HFir5LYamdlm6SiaBdwx"
          }
        }
      },
      "FullOauthDecision": {
        "type": "object",
        "description": "A user's remembered oauth decision",
        "required": ["uuid", "app", "workspace", "action"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "app": {
            "type": "string",
            "description": "The application the decision was made for"
          },
          "workspace": { "$ref": "#/components/schemas/SimpleWorkspace" },
          "action": {
            "type": "string",
            "description": "Action what to do with new oauth requests",
            "enum": ["Accept", "Deny"]
          }
        }
      },
      "FullPort": {
        "type": "object",
        "description": "The full representation of a port",
        "required": [
          "uuid",
          "port",
          "protocol",
          "certainty",
          "host",
          "comment",
          "tags",
          "workspace",
          "sources",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Uuid of the port"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "Port number",
            "example": 1337,
            "minimum": 0
          },
          "protocol": { "$ref": "#/components/schemas/PortProtocol" },
          "certainty": { "$ref": "#/components/schemas/PortCertainty" },
          "host": { "$ref": "#/components/schemas/SimpleHost" },
          "comment": {
            "type": "string",
            "description": "A comment to the port"
          },
          "tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTag" },
            "description": "The tags this port is linked to"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this port is linked to"
          },
          "sources": { "$ref": "#/components/schemas/SimpleAggregationSource" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          }
        }
      },
      "FullQueryCertificateTransparencyResult": {
        "type": "object",
        "description": "A simple representation of a query certificate transparency result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "issuer_name",
          "common_name",
          "value_names",
          "serial_number"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "issuer_name": {
            "type": "string",
            "description": "The name of the issuer"
          },
          "common_name": {
            "type": "string",
            "description": "The common name of the certificate"
          },
          "value_names": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The values of the certificate"
          },
          "not_before": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the certificate",
            "nullable": true
          },
          "not_after": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the certificate",
            "nullable": true
          },
          "serial_number": {
            "type": "string",
            "description": "The serial number of the certificate"
          }
        }
      },
      "FullService": {
        "type": "object",
        "description": "A full representation of a service",
        "required": [
          "uuid",
          "name",
          "certainty",
          "host",
          "comment",
          "workspace",
          "tags",
          "sources",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Uuid of the service"
          },
          "name": {
            "type": "string",
            "description": "The service's name",
            "example": "postgresql"
          },
          "version": {
            "type": "string",
            "description": "An optional version of the running service",
            "example": "13.0.1",
            "nullable": true
          },
          "certainty": { "$ref": "#/components/schemas/ServiceCertainty" },
          "host": { "$ref": "#/components/schemas/SimpleHost" },
          "port": {
            "allOf": [{ "$ref": "#/components/schemas/SimplePort" }],
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "A comment to the service",
            "example": "Holds all relevant information"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this service is linked to"
          },
          "tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTag" },
            "description": "The tags this service is linked to"
          },
          "sources": { "$ref": "#/components/schemas/SimpleAggregationSource" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          }
        }
      },
      "FullServiceDetectionResult": {
        "type": "object",
        "description": "A simple representation of a service detection result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "certainty",
          "service_names",
          "host",
          "port"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "certainty": {
            "type": "string",
            "description": "The certainty a service is detected",
            "enum": [
              "Historical",
              "SupposedTo",
              "MaybeVerified",
              "DefinitelyVerified",
              "UnknownService"
            ]
          },
          "service_names": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The found names of the service"
          },
          "host": {
            "type": "string",
            "description": "The ip address a port was found on",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "Port number",
            "minimum": 0
          }
        }
      },
      "FullUdpServiceDetectionResult": {
        "type": "object",
        "description": "A simple representation of a service detection result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "certainty",
          "service_names",
          "host",
          "port"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "certainty": {
            "type": "string",
            "description": "The certainty a service is detected",
            "enum": [
              "Historical",
              "SupposedTo",
              "MaybeVerified",
              "DefinitelyVerified",
              "UnknownService"
            ]
          },
          "service_names": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The found names of the service"
          },
          "host": {
            "type": "string",
            "description": "The ip address a port was found on",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "Port number",
            "minimum": 0
          }
        }
      },
      "FullUser": {
        "type": "object",
        "description": "A single user representation",
        "required": [
          "uuid",
          "username",
          "display_name",
          "permission",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the user"
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "user123"
          },
          "display_name": {
            "type": "string",
            "description": "The displayname of the user",
            "example": "Anon"
          },
          "permission": { "$ref": "#/components/schemas/UserPermission" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this user was created"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "The last point in time when the user has logged in",
            "nullable": true
          }
        }
      },
      "FullWordlist": {
        "type": "object",
        "description": "A wordlist including its `path` field only meant for admins",
        "required": ["uuid", "name", "description", "path"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the wordlist"
          },
          "name": {
            "type": "string",
            "description": "The wordlist's name to be displayed select buttons",
            "example": "subdomains-top1million-5000.txt"
          },
          "description": {
            "type": "string",
            "description": "A description explaining the wordlist's intended use case",
            "example": "List of 5000 subdomains"
          },
          "path": {
            "type": "string",
            "description": "The file path the wordlist is deployed under on each leech",
            "example": "/opt/wordlists/Discovery/DNS/subdomains-top1million-5000.txt"
          }
        }
      },
      "FullWorkspace": {
        "type": "object",
        "description": "A full version of a workspace",
        "required": [
          "uuid",
          "name",
          "owner",
          "attacks",
          "members",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the workspace"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace",
            "example": "ultra-secure-workspace"
          },
          "description": {
            "type": "string",
            "description": "The description of the workspace",
            "example": "This workspace is ultra secure and should not be looked at!!",
            "nullable": true
          },
          "owner": { "$ref": "#/components/schemas/SimpleUser" },
          "attacks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleAttack" },
            "description": "The attacks linked to this workspace"
          },
          "members": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleUser" },
            "description": "The member of the workspace"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time the workspace was created"
          }
        }
      },
      "FullWorkspaceInvitation": {
        "type": "object",
        "description": "The full representation of an invitation to a workspace",
        "required": ["uuid", "workspace", "from", "target"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the invitation"
          },
          "workspace": { "$ref": "#/components/schemas/SimpleWorkspace" },
          "from": { "$ref": "#/components/schemas/SimpleUser" },
          "target": { "$ref": "#/components/schemas/SimpleUser" }
        }
      },
      "FullWorkspaceTag": {
        "type": "object",
        "description": "The full representation of a full workspace tag",
        "required": ["uuid", "name", "color", "workspace"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the workspace tag"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag",
            "example": "seems broken"
          },
          "color": { "$ref": "#/components/schemas/Color" },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this tag is linked to"
          }
        }
      },
      "GetAllDomainsQuery": {
        "allOf": [
          { "$ref": "#/components/schemas/PageParams" },
          {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "format": "uuid",
                "description": "Only get domains pointing to a specific host\n\nThis includes domains which point to another domain which points to this host.",
                "nullable": true
              },
              "global_filter": {
                "type": "string",
                "description": "An optional general filter to apply",
                "nullable": true
              },
              "domain_filter": {
                "type": "string",
                "description": "An optional domain specific filter to apply",
                "nullable": true
              }
            }
          }
        ],
        "description": "Query parameters for filtering the domains to get"
      },
      "GetAllHostsQuery": {
        "allOf": [
          { "$ref": "#/components/schemas/PageParams" },
          {
            "type": "object",
            "properties": {
              "global_filter": {
                "type": "string",
                "description": "An optional general filter to apply",
                "nullable": true
              },
              "host_filter": {
                "type": "string",
                "description": "An optional host specific filter to apply",
                "nullable": true
              }
            }
          }
        ],
        "description": "Query parameters for filtering the hosts to get"
      },
      "GetAllPortsQuery": {
        "allOf": [
          { "$ref": "#/components/schemas/PageParams" },
          {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "format": "uuid",
                "description": "Only get ports associated with a specific host",
                "nullable": true
              },
              "global_filter": {
                "type": "string",
                "description": "An optional general filter to apply",
                "nullable": true
              },
              "port_filter": {
                "type": "string",
                "description": "An optional port specific filter to apply",
                "nullable": true
              }
            }
          }
        ],
        "description": "Query parameters for filtering the ports to get"
      },
      "GetAllServicesQuery": {
        "allOf": [
          { "$ref": "#/components/schemas/PageParams" },
          {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "format": "uuid",
                "description": "Only get services associated with a specific host",
                "nullable": true
              },
              "global_filter": {
                "type": "string",
                "description": "An optional general filter to apply",
                "nullable": true
              },
              "service_filter": {
                "type": "string",
                "description": "An optional service specific filter to apply",
                "nullable": true
              }
            }
          }
        ],
        "description": "Query parameters for filtering the services to get"
      },
      "HostAliveResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleHostAliveResult" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "HostCertainty": {
        "type": "string",
        "description": "The certainty of a host",
        "enum": ["Historical", "SupposedTo", "Verified"]
      },
      "HostRelations": {
        "type": "object",
        "description": "A host's direct relations",
        "required": ["ports", "services", "direct_domains", "indirect_domains"],
        "properties": {
          "ports": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimplePort" },
            "description": "This host's ports"
          },
          "services": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleService" },
            "description": "This host's services"
          },
          "direct_domains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleDomain" },
            "description": "Domains pointing to this host via a direct `A` or `AAAA` record"
          },
          "indirect_domains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleDomain" },
            "description": "Domains pointing to this host via a `CNAME` record which eventually resolves to the host"
          }
        }
      },
      "HostResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullHost" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "HostsAliveRequest": {
        "type": "object",
        "description": "Host Alive check request",
        "required": [
          "targets",
          "timeout",
          "concurrent_limit",
          "workspace_uuid"
        ],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "targets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The ip addresses / networks or domains to scan",
            "example": ["10.13.37.1", "10.13.37.0/24", "google.com"]
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "description": "The time to wait until a host is considered down.\n\nThe timeout is specified in milliseconds.",
            "example": 3000,
            "minimum": 0
          },
          "concurrent_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The concurrent task limit",
            "example": 30,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "InviteToWorkspaceRequest": {
        "type": "object",
        "description": "The request to invite a user to the workspace",
        "required": ["user"],
        "properties": {
          "user": {
            "type": "string",
            "format": "uuid",
            "description": "The user to invite"
          }
        }
      },
      "LeechConfig": {
        "allOf": [
          { "$ref": "#/components/schemas/LeechTlsConfig" },
          {
            "type": "object",
            "required": ["secret"],
            "properties": {
              "secret": {
                "type": "string",
                "description": "The secret of the leech"
              }
            }
          }
        ],
        "description": "The configuration of a leech"
      },
      "LeechTlsConfig": {
        "type": "object",
        "description": "The tls related part of a leech's config",
        "required": ["ca", "cert", "key", "sni"],
        "properties": {
          "ca": {
            "type": "string",
            "description": "PEM encoded CA managed by kraken"
          },
          "cert": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "key": {
            "type": "string",
            "description": "PEM encoded private key for the certificate"
          },
          "sni": {
            "type": "string",
            "description": "The randomly generated fake domain for the kraken to be used for sni"
          }
        }
      },
      "ListApiKeys": {
        "type": "object",
        "description": "The response that contains all api keys",
        "required": ["keys"],
        "properties": {
          "keys": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullApiKey" },
            "description": "The list of api keys"
          }
        }
      },
      "ListAttacks": {
        "type": "object",
        "description": "A list of attacks",
        "required": ["attacks"],
        "properties": {
          "attacks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleAttack" },
            "description": "The list of the attacks"
          }
        }
      },
      "ListFindingDefinitions": {
        "type": "object",
        "description": "A list of simple definition of a finding",
        "required": ["finding_definitions"],
        "properties": {
          "finding_definitions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleFindingDefinition" },
            "description": "The finding definitions"
          }
        }
      },
      "ListFullUsers": {
        "type": "object",
        "description": "The response of all users",
        "required": ["users"],
        "properties": {
          "users": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullUser" },
            "description": "The list of full users"
          }
        }
      },
      "ListGlobalTags": {
        "type": "object",
        "description": "The response to a request to retrieve all global tags",
        "required": ["global_tags"],
        "properties": {
          "global_tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullGlobalTag" },
            "description": "List of global tags"
          }
        }
      },
      "ListLeeches": {
        "type": "object",
        "description": "The response that hold all leeches",
        "required": ["leeches"],
        "properties": {
          "leeches": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleLeech" },
            "description": "The list of leeches"
          }
        }
      },
      "ListOauthApplications": {
        "type": "object",
        "description": "List all oauth applications",
        "required": ["apps"],
        "properties": {
          "apps": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullOauthClient" },
            "description": "The list of applications"
          }
        }
      },
      "ListOauthDecisions": {
        "type": "object",
        "description": "Response holding a user's oauth decisions",
        "required": ["decisions"],
        "properties": {
          "decisions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullOauthDecision" },
            "description": "A user's oauth decisions"
          }
        }
      },
      "ListUsers": {
        "type": "object",
        "description": "The response with all users",
        "required": ["users"],
        "properties": {
          "users": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleUser" },
            "description": "List of users"
          }
        }
      },
      "ListWordlists": {
        "type": "object",
        "description": "Response containing all wordlists",
        "required": ["wordlists"],
        "properties": {
          "wordlists": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleWordlist" },
            "description": "List of all wordlists"
          }
        }
      },
      "ListWordlistsAdmin": {
        "type": "object",
        "description": "Response containing all wordlists including their `path` fields",
        "required": ["wordlists"],
        "properties": {
          "wordlists": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullWordlist" },
            "description": "List of all wordlists including their `path` fields"
          }
        }
      },
      "ListWorkspaceTags": {
        "type": "object",
        "description": "The response to a request to retrieve all workspace tags",
        "required": ["workspace_tags"],
        "properties": {
          "workspace_tags": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullWorkspaceTag" },
            "description": "Workspace tags"
          }
        }
      },
      "ListWorkspaces": {
        "type": "object",
        "description": "The response to retrieve a list of workspaces",
        "required": ["workspaces"],
        "properties": {
          "workspaces": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleWorkspace" },
            "description": "The list of workspaces"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "description": "The request to login",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username that should be used for login",
            "example": "user123"
          },
          "password": {
            "type": "string",
            "description": "The password that should be used for login",
            "example": "super-secure-password"
          }
        }
      },
      "ManualHostCertainty": {
        "type": "string",
        "description": "The certainty of a manually added host",
        "enum": ["Historical", "SupposedTo"]
      },
      "ManualInsert": {
        "oneOf": [
          {
            "type": "object",
            "description": "A manually inserted domain",
            "required": ["domain", "user", "workspace", "created_at", "type"],
            "properties": {
              "domain": {
                "type": "string",
                "description": "The inserted domain"
              },
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the domain was inserted to"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The point in time, the domain was inserted"
              },
              "type": { "type": "string", "enum": ["Domain"] }
            }
          },
          {
            "type": "object",
            "description": "A manually inserted host",
            "required": [
              "ip_addr",
              "os_type",
              "certainty",
              "user",
              "workspace",
              "created_at",
              "type"
            ],
            "properties": {
              "ip_addr": {
                "type": "string",
                "description": "The host's ip address",
                "example": "172.0.0.1"
              },
              "os_type": { "$ref": "#/components/schemas/OsType" },
              "certainty": {
                "$ref": "#/components/schemas/ManualHostCertainty"
              },
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the host was inserted to"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The point in time, the host was inserted"
              },
              "type": { "type": "string", "enum": ["Host"] }
            }
          },
          {
            "type": "object",
            "description": "A manually inserted port",
            "required": [
              "port",
              "protocol",
              "certainty",
              "host",
              "user",
              "workspace",
              "created_at",
              "type"
            ],
            "properties": {
              "port": {
                "type": "integer",
                "format": "int32",
                "description": "The inserted port",
                "minimum": 0
              },
              "protocol": { "$ref": "#/components/schemas/PortProtocol" },
              "certainty": {
                "$ref": "#/components/schemas/ManualPortCertainty"
              },
              "host": {
                "type": "string",
                "description": "The host's ip address",
                "example": "172.0.0.1"
              },
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the port was inserted to"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The point in time, the port was inserted"
              },
              "type": { "type": "string", "enum": ["Port"] }
            }
          },
          {
            "type": "object",
            "description": "A manually inserted service",
            "required": [
              "name",
              "certainty",
              "host",
              "user",
              "workspace",
              "created_at",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The inserted service"
              },
              "version": {
                "type": "string",
                "description": "The service's version",
                "nullable": true
              },
              "certainty": {
                "$ref": "#/components/schemas/ManualServiceCertainty"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "description": "The service's port",
                "nullable": true,
                "minimum": 0
              },
              "host": {
                "type": "string",
                "description": "The host's ip address",
                "example": "172.0.0.1"
              },
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the service was inserted to"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The point in time, the service was inserted"
              },
              "type": { "type": "string", "enum": ["Service"] }
            }
          }
        ],
        "description": "The different types of manual inserts",
        "discriminator": { "propertyName": "type" }
      },
      "ManualPortCertainty": {
        "type": "string",
        "description": "The certainty of a manually added port",
        "enum": ["Historical", "SupposedTo"]
      },
      "ManualServiceCertainty": {
        "type": "string",
        "description": "The certainty of a manually added service",
        "enum": ["Historical", "SupposedTo"]
      },
      "OpenRequestInfo": {
        "type": "object",
        "description": "The information about an oauth request",
        "required": ["workspace", "oauth_application"],
        "properties": {
          "workspace": { "$ref": "#/components/schemas/SimpleWorkspace" },
          "oauth_application": {
            "$ref": "#/components/schemas/SimpleOauthClient"
          }
        }
      },
      "OsType": {
        "type": "string",
        "description": "A representation of an OS type",
        "enum": ["Unknown", "Linux", "Windows", "Apple", "Android", "FreeBSD"]
      },
      "PageParams": {
        "type": "object",
        "description": "Query parameters for paginated data",
        "required": ["limit", "offset"],
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Number of items to retrieve",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Position in the whole list to start retrieving from",
            "minimum": 0
          }
        }
      },
      "PortCertainty": {
        "type": "string",
        "description": "The certainty states of a port",
        "enum": ["Historical", "SupposedTo", "Verified"]
      },
      "PortOrRange": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A single port",
            "example": 8000,
            "minimum": 0
          },
          {
            "type": "string",
            "description": "In inclusive range of ports",
            "example": "1-1024"
          }
        ],
        "description": "Single port or a range of ports"
      },
      "PortProtocol": {
        "type": "string",
        "description": "A protocol of a port",
        "enum": ["Unknown", "Tcp", "Udp", "Sctp"]
      },
      "PortRelations": {
        "type": "object",
        "description": "A port's direct relations",
        "required": ["host", "services"],
        "properties": {
          "host": { "$ref": "#/components/schemas/SimpleHost" },
          "services": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleService" },
            "description": "Services listening on this port"
          }
        }
      },
      "PortResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullPort" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "Query": {
        "oneOf": [
          {
            "type": "object",
            "required": ["Email"],
            "properties": {
              "Email": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["IpAddress"],
            "properties": {
              "IpAddress": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Username"],
            "properties": {
              "Username": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Password"],
            "properties": {
              "Password": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["HashedPassword"],
            "properties": {
              "HashedPassword": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Name"],
            "properties": {
              "Name": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Domain"],
            "properties": {
              "Domain": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Vin"],
            "properties": {
              "Vin": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Phone"],
            "properties": {
              "Phone": { "$ref": "#/components/schemas/SearchType" }
            }
          },
          {
            "type": "object",
            "required": ["Address"],
            "properties": {
              "Address": { "$ref": "#/components/schemas/SearchType" }
            }
          }
        ],
        "description": "A query for dehashed"
      },
      "QueryCertificateTransparencyRequest": {
        "type": "object",
        "description": "The settings to configure a certificate transparency request",
        "required": [
          "target",
          "include_expired",
          "max_retries",
          "retry_interval",
          "workspace_uuid"
        ],
        "properties": {
          "target": {
            "type": "string",
            "description": "Domain to query certificates for",
            "example": "example.com"
          },
          "include_expired": {
            "type": "boolean",
            "description": "Should expired certificates be included as well",
            "example": true
          },
          "max_retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times the query should be retried if it failed.",
            "example": 3,
            "minimum": 0
          },
          "retry_interval": {
            "type": "integer",
            "format": "int64",
            "description": "The interval that should be waited between retries.\n\nThe interval is specified in milliseconds.",
            "example": 500,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "QueryCertificateTransparencyResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullQueryCertificateTransparencyResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "QueryDehashedRequest": {
        "type": "object",
        "description": "The request to query the dehashed API",
        "required": ["query", "workspace_uuid"],
        "properties": {
          "query": { "$ref": "#/components/schemas/Query" },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "QueryUnhashedResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleQueryUnhashedResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "ScanTcpPortsRequest": {
        "type": "object",
        "description": "The settings to configure a tcp port scan",
        "required": [
          "targets",
          "retry_interval",
          "max_retries",
          "timeout",
          "concurrent_limit",
          "skip_icmp_check",
          "workspace_uuid"
        ],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "targets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "The ip addresses / networks or domains to scan",
            "example": ["10.13.37.1", "10.13.37.0/24", "google.com"]
          },
          "ports": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PortOrRange" },
            "description": "List of single ports and port ranges\n\nIf no values are supplied, 1-65535 is used as default"
          },
          "retry_interval": {
            "type": "integer",
            "format": "int64",
            "description": "The interval that should be wait between retries on a port.\n\nThe interval is specified in milliseconds.",
            "example": 100,
            "minimum": 0
          },
          "max_retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times the connection should be retried if it failed.",
            "example": 2,
            "minimum": 0
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "description": "The time to wait until a connection is considered failed.\n\nThe timeout is specified in milliseconds.",
            "example": 3000,
            "minimum": 0
          },
          "concurrent_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The concurrent task limit",
            "example": 5000,
            "minimum": 0
          },
          "skip_icmp_check": {
            "type": "boolean",
            "description": "Skips the initial icmp check.\n\nAll hosts are assumed to be reachable",
            "example": false
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "SearchEntry": {
        "type": "object",
        "description": "Searched entry",
        "required": ["uuid", "created_at", "search_term"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the search"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this search was created"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this search was finished",
            "nullable": true
          },
          "search_term": {
            "type": "string",
            "description": "The search term that was used"
          }
        }
      },
      "SearchResultEntry": {
        "oneOf": [
          {
            "type": "object",
            "required": ["HostEntry"],
            "properties": {
              "HostEntry": { "$ref": "#/components/schemas/SimpleHost" }
            }
          },
          {
            "type": "object",
            "required": ["ServiceEntry"],
            "properties": {
              "ServiceEntry": { "$ref": "#/components/schemas/SimpleService" }
            }
          },
          {
            "type": "object",
            "required": ["PortEntry"],
            "properties": {
              "PortEntry": { "$ref": "#/components/schemas/SimplePort" }
            }
          },
          {
            "type": "object",
            "required": ["DomainEntry"],
            "properties": {
              "DomainEntry": { "$ref": "#/components/schemas/SimpleDomain" }
            }
          },
          {
            "type": "object",
            "required": ["DnsRecordResultEntry"],
            "properties": {
              "DnsRecordResultEntry": {
                "$ref": "#/components/schemas/SimpleDnsResolutionResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["DnsTxtScanResultEntry"],
            "properties": {
              "DnsTxtScanResultEntry": {
                "$ref": "#/components/schemas/SimpleDnsTxtScanResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["TcpPortScanResultEntry"],
            "properties": {
              "TcpPortScanResultEntry": {
                "$ref": "#/components/schemas/SimpleTcpPortScanResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["DehashedQueryResultEntry"],
            "properties": {
              "DehashedQueryResultEntry": {
                "$ref": "#/components/schemas/SimpleQueryUnhashedResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["CertificateTransparencyResultEntry"],
            "properties": {
              "CertificateTransparencyResultEntry": {
                "$ref": "#/components/schemas/FullQueryCertificateTransparencyResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["HostAliveResult"],
            "properties": {
              "HostAliveResult": {
                "$ref": "#/components/schemas/SimpleHostAliveResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["ServiceDetectionResult"],
            "properties": {
              "ServiceDetectionResult": {
                "$ref": "#/components/schemas/FullServiceDetectionResult"
              }
            }
          },
          {
            "type": "object",
            "required": ["UdpServiceDetectionResult"],
            "properties": {
              "UdpServiceDetectionResult": {
                "$ref": "#/components/schemas/FullUdpServiceDetectionResult"
              }
            }
          }
        ],
        "description": "Dynamic result of a search"
      },
      "SearchResultPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SearchResultEntry" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "SearchType": {
        "oneOf": [
          {
            "type": "object",
            "required": ["Simple"],
            "properties": {
              "Simple": {
                "type": "string",
                "description": "Search for a simple pattern"
              }
            }
          },
          {
            "type": "object",
            "required": ["Exact"],
            "properties": {
              "Exact": {
                "type": "string",
                "description": "Search for an exact pattern"
              }
            }
          },
          {
            "type": "object",
            "required": ["Regex"],
            "properties": {
              "Regex": {
                "type": "string",
                "description": "A regex search pattern"
              }
            }
          },
          {
            "type": "object",
            "required": ["Or"],
            "properties": {
              "Or": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SearchType" },
                "description": "Add multiple [SearchType]s with an OR"
              }
            }
          },
          {
            "type": "object",
            "required": ["And"],
            "properties": {
              "And": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/SearchType" },
                "description": "Add multiple [SearchType]s with an AND"
              }
            }
          }
        ],
        "description": "A specific search type"
      },
      "SearchWorkspaceRequest": {
        "type": "object",
        "description": "Request to search the workspace",
        "required": ["search_term"],
        "properties": {
          "search_term": {
            "type": "string",
            "description": "the term to search for"
          }
        }
      },
      "SearchesResultPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SearchEntry" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "ServiceCertainty": {
        "type": "string",
        "description": "The certainty a service is detected",
        "enum": [
          "Historical",
          "SupposedTo",
          "MaybeVerified",
          "DefinitelyVerified",
          "UnknownService"
        ]
      },
      "ServiceDetectionRequest": {
        "type": "object",
        "description": "The request to start a service detection",
        "required": ["address", "port", "timeout", "workspace_uuid"],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "The ip address the service listens on",
            "example": "10.13.37.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "The port the service listens on",
            "example": 443,
            "minimum": 0
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "description": "Time to wait for a response after sending the payload\n(or after establishing a connection, if not payload is to be sent)\n\nThe timeout is specified in milliseconds.",
            "example": 3000,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "ServiceDetectionResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullServiceDetectionResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "ServiceRelations": {
        "type": "object",
        "description": "A service's direct relations",
        "required": ["host"],
        "properties": {
          "port": {
            "allOf": [{ "$ref": "#/components/schemas/SimplePort" }],
            "nullable": true
          },
          "host": { "$ref": "#/components/schemas/SimpleHost" }
        }
      },
      "ServiceResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullService" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "SetPasswordRequest": {
        "type": "object",
        "description": "The request to set a new password for a user",
        "required": ["current_password", "new_password"],
        "properties": {
          "current_password": {
            "type": "string",
            "description": "The current password",
            "example": "super-secure-password"
          },
          "new_password": {
            "type": "string",
            "description": "The new password",
            "example": "ultra-secure-password!1!1!"
          }
        }
      },
      "SettingsFull": {
        "type": "object",
        "description": "The live settings of kraken",
        "required": [
          "mfa_required",
          "oidc_initial_permission_level",
          "created_at"
        ],
        "properties": {
          "mfa_required": {
            "type": "boolean",
            "description": "Require mfa for local users"
          },
          "oidc_initial_permission_level": {
            "$ref": "#/components/schemas/UserPermission"
          },
          "dehashed_email": {
            "type": "string",
            "description": "The email for the dehashed account",
            "example": "foo@example.com",
            "nullable": true
          },
          "dehashed_api_key": {
            "type": "string",
            "description": "The api key for the dehashed account",
            "example": "1231kb3kkb51kj31kjb231kj3b1jk23bkj123",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time the settings were created"
          }
        }
      },
      "SimpleAggregationSource": {
        "type": "object",
        "description": "Numbers how many attacks of a certain kind found an aggregated model",
        "required": [
          "bruteforce_subdomains",
          "tcp_port_scan",
          "query_certificate_transparency",
          "query_dehashed",
          "host_alive",
          "service_detection",
          "udp_service_detection",
          "dns_resolution",
          "dns_txt_scan",
          "forced_browsing",
          "os_detection",
          "anti_port_scanning_detection",
          "udp_port_scan",
          "version_detection",
          "manual"
        ],
        "properties": {
          "bruteforce_subdomains": {
            "type": "integer",
            "description": "Bruteforce subdomains via DNS requests",
            "minimum": 0
          },
          "tcp_port_scan": {
            "type": "integer",
            "description": "Scan tcp ports",
            "minimum": 0
          },
          "query_certificate_transparency": {
            "type": "integer",
            "description": "Query certificate transparency",
            "minimum": 0
          },
          "query_dehashed": {
            "type": "integer",
            "description": "Query the dehashed API",
            "minimum": 0
          },
          "host_alive": {
            "type": "integer",
            "description": "Check if a host is reachable via icmp",
            "minimum": 0
          },
          "service_detection": {
            "type": "integer",
            "description": "Detect the service that is running on a port",
            "minimum": 0
          },
          "udp_service_detection": {
            "type": "integer",
            "description": "Detect UDP services on a host on given ports",
            "minimum": 0
          },
          "dns_resolution": {
            "type": "integer",
            "description": "Resolve domain names",
            "minimum": 0
          },
          "dns_txt_scan": {
            "type": "integer",
            "description": "DNS TXT scans",
            "minimum": 0
          },
          "forced_browsing": {
            "type": "integer",
            "description": "Perform forced browsing",
            "minimum": 0
          },
          "os_detection": {
            "type": "integer",
            "description": "Detect the OS of the target",
            "minimum": 0
          },
          "anti_port_scanning_detection": {
            "type": "integer",
            "description": "Detect if anti-port scanning techniques are in place",
            "minimum": 0
          },
          "udp_port_scan": {
            "type": "integer",
            "description": "Scan udp ports",
            "minimum": 0
          },
          "version_detection": {
            "type": "integer",
            "description": "Perform version detection",
            "minimum": 0
          },
          "manual": { "type": "boolean", "description": "Manually inserted" }
        }
      },
      "SimpleAttack": {
        "type": "object",
        "description": "A simple version of an attack",
        "required": [
          "uuid",
          "workspace",
          "attack_type",
          "started_by",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the attack"
          },
          "workspace": { "$ref": "#/components/schemas/SimpleWorkspace" },
          "attack_type": { "$ref": "#/components/schemas/AttackType" },
          "started_by": { "$ref": "#/components/schemas/SimpleUser" },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "If this is None, the attack is still running",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "If this field is set, the attack has finished with an error",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this attack was started"
          }
        }
      },
      "SimpleBruteforceSubdomainsResult": {
        "type": "object",
        "description": "A simple representation of a bruteforce subdomains result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "source",
          "destination",
          "dns_record_type"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "source": { "type": "string", "description": "The source address" },
          "destination": {
            "type": "string",
            "description": "The destination address"
          },
          "dns_record_type": {
            "type": "string",
            "description": "The type of DNS Record",
            "enum": ["A", "Aaaa", "Caa", "Cname", "Mx", "Tlsa", "Txt"]
          }
        }
      },
      "SimpleDnsResolutionResult": {
        "type": "object",
        "description": "A simple representation of a dns resolution result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "source",
          "destination",
          "dns_record_type"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "source": { "type": "string", "description": "The source address" },
          "destination": {
            "type": "string",
            "description": "The destination address"
          },
          "dns_record_type": {
            "type": "string",
            "description": "The type of DNS Record",
            "enum": ["A", "Aaaa", "Caa", "Cname", "Mx", "Tlsa", "Txt"]
          }
        }
      },
      "SimpleDnsTxtScanResult": {
        "type": "object",
        "description": "A simple representation of a dns txt scan result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "domain",
          "collection_type"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "domain": { "type": "string", "description": "The source address" },
          "collection_type": {
            "$ref": "#/components/schemas/DnsTxtScanSummaryType"
          }
        }
      },
      "SimpleDomain": {
        "type": "object",
        "description": "A simple representation of a domain in a workspace",
        "required": [
          "uuid",
          "domain",
          "comment",
          "workspace",
          "created_at",
          "certainty"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the domain"
          },
          "domain": {
            "type": "string",
            "description": "The domain name",
            "example": "example.com"
          },
          "comment": {
            "type": "string",
            "description": "The comment to the domain",
            "example": "This is a important domain!"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this domain is linked to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this domain was created"
          },
          "certainty": { "$ref": "#/components/schemas/DomainCertainty" }
        }
      },
      "SimpleFindingDefinition": {
        "type": "object",
        "description": "The simple definition of a finding",
        "required": ["uuid", "name", "severity", "summary", "created_at"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of a finding definition"
          },
          "name": {
            "type": "string",
            "description": "Name of the new finding definition"
          },
          "severity": { "$ref": "#/components/schemas/FindingSeverity" },
          "summary": {
            "type": "string",
            "description": "Short summary of the finding"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time this finding definition was created"
          }
        }
      },
      "SimpleHost": {
        "type": "object",
        "description": "The simple representation of a host",
        "required": [
          "uuid",
          "ip_addr",
          "os_type",
          "comment",
          "workspace",
          "created_at",
          "certainty"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the host"
          },
          "ip_addr": {
            "type": "string",
            "description": "The ip address of the host",
            "example": "172.0.0.1"
          },
          "os_type": { "$ref": "#/components/schemas/OsType" },
          "response_time": {
            "type": "integer",
            "format": "int32",
            "description": "Response time in ms",
            "nullable": true
          },
          "comment": { "type": "string", "description": "A comment" },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this host is in"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          },
          "certainty": { "$ref": "#/components/schemas/HostCertainty" }
        }
      },
      "SimpleHostAliveResult": {
        "type": "object",
        "description": "A simple representation of a host alive result",
        "required": ["uuid", "attack", "created_at", "host"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "host": {
            "type": "string",
            "description": "A host that responded",
            "example": "127.0.0.1"
          }
        }
      },
      "SimpleLeech": {
        "type": "object",
        "description": "The simple representation of a leech",
        "required": ["uuid", "name", "address"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "uuid of the leech"
          },
          "name": {
            "type": "string",
            "description": "Name of the leech",
            "example": "leech-01"
          },
          "address": {
            "type": "string",
            "description": "Address of the leech",
            "example": "https://10.13.37.1:8081"
          }
        }
      },
      "SimpleOauthClient": {
        "type": "object",
        "description": "A simple (secret-less) version of a workspace",
        "required": ["uuid", "name", "redirect_uri"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the client"
          },
          "name": {
            "type": "string",
            "description": "The name of the client",
            "example": "Trustworthy application"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect url of the client",
            "example": "http://127.0.0.1:8080"
          }
        }
      },
      "SimplePort": {
        "type": "object",
        "description": "The simple representation of a port",
        "required": [
          "uuid",
          "port",
          "protocol",
          "certainty",
          "host",
          "comment",
          "workspace",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Uuid of the port"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "Port number",
            "example": 1337,
            "minimum": 0
          },
          "protocol": { "$ref": "#/components/schemas/PortProtocol" },
          "certainty": { "$ref": "#/components/schemas/PortCertainty" },
          "host": {
            "type": "string",
            "format": "uuid",
            "description": "The host this port is assigned to"
          },
          "comment": {
            "type": "string",
            "description": "A comment to the port"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace this port is linked to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          }
        }
      },
      "SimpleQueryUnhashedResult": {
        "type": "object",
        "description": "A simple representation of a query unhashed result",
        "required": [
          "uuid",
          "attack",
          "created_at",
          "dehashed_id",
          "ip_address"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "dehashed_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the entry"
          },
          "email": {
            "type": "string",
            "description": "An email address",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "An username",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "A password",
            "nullable": true
          },
          "hashed_password": {
            "type": "string",
            "description": "An hashed password",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "An ip address",
            "example": "127.0.0.1"
          },
          "name": {
            "type": "string",
            "description": "A name",
            "nullable": true
          },
          "vin": { "type": "string", "description": "A vin", "nullable": true },
          "address": {
            "type": "string",
            "description": "An address",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "A phone number",
            "nullable": true
          },
          "database_name": {
            "type": "string",
            "description": "A database name",
            "nullable": true
          }
        }
      },
      "SimpleService": {
        "type": "object",
        "description": "A simple representation of a service",
        "required": [
          "uuid",
          "name",
          "certainty",
          "host",
          "comment",
          "workspace",
          "created_at"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the service"
          },
          "name": {
            "type": "string",
            "description": "The name of the service",
            "example": "postgresql"
          },
          "version": {
            "type": "string",
            "description": "The version of the service",
            "example": "13.0.1",
            "nullable": true
          },
          "certainty": { "$ref": "#/components/schemas/ServiceCertainty" },
          "host": {
            "type": "string",
            "format": "uuid",
            "description": "The host this service is linked to"
          },
          "port": {
            "type": "string",
            "format": "uuid",
            "description": "The port this service may linked to",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The comment attached to the service",
            "example": "Holds all relevant information"
          },
          "workspace": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace is service is linked to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, the record was created"
          }
        }
      },
      "SimpleTag": {
        "type": "object",
        "description": "A simple tag",
        "required": ["uuid", "name", "color", "tag_type"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the tag"
          },
          "name": { "type": "string", "description": "The name of the tag" },
          "color": { "$ref": "#/components/schemas/Color" },
          "tag_type": { "$ref": "#/components/schemas/TagType" }
        }
      },
      "SimpleTcpPortScanResult": {
        "type": "object",
        "description": "A simple representation of a tcp port scan result",
        "required": ["uuid", "attack", "created_at", "address", "port"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key"
          },
          "attack": {
            "type": "string",
            "format": "uuid",
            "description": "The attack which produced this result"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time, this result was produced"
          },
          "address": {
            "type": "string",
            "description": "The ip address a port was found on",
            "example": "127.0.0.1"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "The found port",
            "minimum": 0
          }
        }
      },
      "SimpleUser": {
        "type": "object",
        "description": "This struct holds the user information.\n\nNote that `username` is unique, but as it is changeable,\nidentify the user by its `uuid`",
        "required": ["uuid", "username", "display_name"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the user"
          },
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "display_name": {
            "type": "string",
            "description": "The displayname of the user"
          }
        }
      },
      "SimpleWordlist": {
        "type": "object",
        "description": "A wordlist without its `path` field",
        "required": ["uuid", "name", "description"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the wordlist"
          },
          "name": {
            "type": "string",
            "description": "The wordlist's name to be displayed select buttons",
            "example": "subdomains-top1million-5000.txt"
          },
          "description": {
            "type": "string",
            "description": "A description explaining the wordlist's intended use case",
            "example": "List of 5000 subdomains"
          }
        }
      },
      "SimpleWorkspace": {
        "type": "object",
        "description": "A simple version of a workspace",
        "required": ["uuid", "name", "owner", "created_at"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the workspace"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace",
            "example": "ultra-secure-workspace"
          },
          "description": {
            "type": "string",
            "description": "The description of the workspace",
            "example": "This workspace is ultra secure and should not be looked at!!",
            "nullable": true
          },
          "owner": { "$ref": "#/components/schemas/SimpleUser" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The point in time the workspace was created"
          }
        }
      },
      "SourceAttack": {
        "allOf": [
          { "$ref": "#/components/schemas/SourceAttackResult" },
          {
            "type": "object",
            "required": ["uuid", "workspace_uuid", "started_by", "created_at"],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The identifier of the attack"
              },
              "workspace_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this attack is attached to"
              },
              "started_by": { "$ref": "#/components/schemas/SimpleUser" },
              "finished_at": {
                "type": "string",
                "format": "date-time",
                "description": "If this is None, the attack is still running",
                "nullable": true
              },
              "error": {
                "type": "string",
                "description": "If this field is set, the attack has finished with an error",
                "nullable": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The point in time this attack was started"
              }
            }
          }
        ],
        "description": "Copy of [`SimpleAttack`](crate::api::handler::attacks::SimpleAttack) with an added `results` field"
      },
      "SourceAttackResult": {
        "oneOf": [
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": {
                "type": "string",
                "enum": ["BruteforceSubdomains"]
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleBruteforceSubdomainsResult"
                },
                "description": "The [`AttackType::BruteforceSubdomains`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["TcpPortScan"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleTcpPortScanResult"
                },
                "description": "The [`AttackType::TcpPortScan`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": {
                "type": "string",
                "enum": ["QueryCertificateTransparency"]
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FullQueryCertificateTransparencyResult"
                },
                "description": "The [`AttackType::QueryCertificateTransparency`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["QueryDehashed"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleQueryUnhashedResult"
                },
                "description": "The [`AttackType::QueryUnhashed`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["HostAlive"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleHostAliveResult"
                },
                "description": "The [`AttackType::HostAlive`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["ServiceDetection"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FullServiceDetectionResult"
                },
                "description": "The [`AttackType::ServiceDetection`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": {
                "type": "string",
                "enum": ["UdpServiceDetection"]
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FullUdpServiceDetectionResult"
                },
                "description": "The [`AttackType::UdpServiceDetection`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["DnsResolution"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SimpleDnsResolutionResult"
                },
                "description": "The [`AttackType::DnsResolution`] and its results"
              }
            }
          },
          {
            "type": "object",
            "required": ["attack_type", "results"],
            "properties": {
              "attack_type": { "type": "string", "enum": ["DnsTxtScan"] },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FullDnsTxtScanResult"
                },
                "description": "The [`AttackType::DnsTxtScan`] and its results"
              }
            }
          }
        ],
        "description": "The different types of attack and their results",
        "discriminator": { "propertyName": "attack_type" }
      },
      "TagType": {
        "type": "string",
        "description": "The type of a tag",
        "enum": ["Workspace", "Global"]
      },
      "TcpPortScanResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTcpPortScanResult" },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "TransferWorkspaceRequest": {
        "type": "object",
        "description": "The request to transfer a workspace to another account",
        "required": ["user"],
        "properties": {
          "user": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid of the user that should receive the workspace"
          }
        }
      },
      "UdpServiceDetectionRequest": {
        "type": "object",
        "description": "The request to start a service detection",
        "required": [
          "address",
          "retry_interval",
          "max_retries",
          "timeout",
          "concurrent_limit",
          "workspace_uuid"
        ],
        "properties": {
          "leech_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The leech to use\n\nLeave empty to use a random leech",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "The ip address the service listens on",
            "example": "10.13.37.1"
          },
          "ports": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PortOrRange" },
            "description": "List of single ports and port ranges\n\nIf no values are supplied, 1-65535 is used as default"
          },
          "retry_interval": {
            "type": "integer",
            "format": "int64",
            "description": "The interval that should be wait between retries on a port.\n\nThe interval is specified in milliseconds.",
            "example": 100,
            "minimum": 0
          },
          "max_retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times the connection should be retried if it failed.",
            "example": 2,
            "minimum": 0
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "description": "The time to wait until a connection is considered failed.\n\nThe timeout is specified in milliseconds.",
            "example": 3000,
            "minimum": 0
          },
          "concurrent_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The concurrent task limit",
            "example": 5000,
            "minimum": 0
          },
          "workspace_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The workspace to execute the attack in"
          }
        }
      },
      "UdpServiceDetectionResultsPage": {
        "type": "object",
        "description": "Response containing paginated data",
        "required": ["items", "limit", "offset", "total"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullUdpServiceDetectionResult"
            },
            "description": "The page's items"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit this page was retrieved with",
            "example": 50,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The offset this page was retrieved with",
            "example": 0,
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of items this page is a subset of",
            "minimum": 0
          }
        }
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request to update an api key",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "A descriptive name helping the user to identify the key",
            "example": "Leech on my local machine"
          }
        }
      },
      "UpdateAppRequest": {
        "type": "object",
        "description": "Update an oauth application",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the application",
            "example": "Trustworthy application",
            "nullable": true
          },
          "redirect_uri": {
            "type": "string",
            "description": "The redirect url of the application",
            "example": "http://127.0.0.1:8080",
            "nullable": true
          }
        }
      },
      "UpdateDomainRequest": {
        "type": "object",
        "description": "The request to update a domain",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The comment of the domain",
            "nullable": true
          },
          "global_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "Global tags that are linked to the domain",
            "nullable": true
          },
          "workspace_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "Workspace tags that are linked to the domain",
            "nullable": true
          }
        }
      },
      "UpdateGlobalTag": {
        "type": "object",
        "description": "The request to update a global tag",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the global tag",
            "nullable": true
          },
          "color": {
            "allOf": [{ "$ref": "#/components/schemas/Color" }],
            "nullable": true
          }
        }
      },
      "UpdateHostRequest": {
        "type": "object",
        "description": "The request to update a host",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The comment of a host",
            "nullable": true
          },
          "global_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "The global tags of a host",
            "nullable": true
          },
          "workspace_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "The workspace tags of a host",
            "nullable": true
          }
        }
      },
      "UpdateLeechRequest": {
        "type": "object",
        "description": "The request to update a leech",
        "required": ["address"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the leech",
            "example": "leech-01",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address of the leech",
            "example": "https://10.13.37.1:8081"
          },
          "description": {
            "type": "string",
            "description": "Description of the leech",
            "example": "First leech in a private network",
            "nullable": true
          }
        }
      },
      "UpdateMeRequest": {
        "type": "object",
        "description": "The request to update the own user\n\nAt least one of the options must be set",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username",
            "example": "cyber-user-123",
            "nullable": true
          },
          "display_name": {
            "type": "string",
            "description": "The displayname",
            "example": "Cyberhacker",
            "nullable": true
          }
        }
      },
      "UpdatePortRequest": {
        "type": "object",
        "description": "The request to update a port",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The comment of the port",
            "nullable": true
          },
          "global_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "Global tags that are linked to the port",
            "nullable": true
          },
          "workspace_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "Workspace tags that are linked to the port",
            "nullable": true
          }
        }
      },
      "UpdateServiceRequest": {
        "type": "object",
        "description": "The request to update a service",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The comment of the service",
            "nullable": true
          },
          "global_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "The global tags that are attached to the service",
            "nullable": true
          },
          "workspace_tags": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "description": "The workspace tags that are attached to the service",
            "nullable": true
          }
        }
      },
      "UpdateSettingsRequest": {
        "type": "object",
        "description": "The request to update the settings",
        "required": ["mfa_required", "oidc_initial_permission_level"],
        "properties": {
          "mfa_required": {
            "type": "boolean",
            "description": "Require mfa for local users"
          },
          "oidc_initial_permission_level": {
            "$ref": "#/components/schemas/UserPermission"
          },
          "dehashed_email": {
            "type": "string",
            "description": "The email for the dehashed account",
            "example": "foo@example.com",
            "nullable": true
          },
          "dehashed_api_key": {
            "type": "string",
            "description": "The api key for the dehashed account",
            "example": "1231kb3kkb51kj31kjb231kj3b1jk23bkj123",
            "nullable": true
          }
        }
      },
      "UpdateWordlistRequest": {
        "type": "object",
        "description": "Arguments for updating an existing wordlist",
        "required": ["uuid"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The primary key of the wordlist to update"
          },
          "name": {
            "type": "string",
            "description": "The wordlist's name to be displayed select buttons",
            "example": "subdomains-top1million-5000.txt",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description explaining the wordlist's intended use case",
            "example": "List of 5000 subdomains",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "The file path the wordlist is deployed under on each leech",
            "example": "/opt/wordlists/Discovery/DNS/subdomains-top1million-5000.txt",
            "nullable": true
          }
        }
      },
      "UpdateWorkspaceRequest": {
        "type": "object",
        "description": "The request type to update a workspace\n\nAll parameter are optional, but at least one of them must be specified",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the workspace",
            "example": "Workspace for work",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the workspace",
            "example": "This workspace is for work and for work only!",
            "nullable": true
          }
        }
      },
      "UpdateWorkspaceTag": {
        "type": "object",
        "description": "The request to update a workspace tag",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tag",
            "nullable": true
          },
          "color": {
            "allOf": [{ "$ref": "#/components/schemas/Color" }],
            "nullable": true
          }
        }
      },
      "UserPermission": {
        "type": "string",
        "description": "The permission of a user",
        "enum": ["ReadOnly", "Default", "Admin"]
      },
      "UuidResponse": {
        "type": "object",
        "description": "A common response that contains a single uuid",
        "required": ["uuid"],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The uuid"
          }
        }
      },
      "WorkspaceInvitationList": {
        "type": "object",
        "description": "A list of invitations to workspaces",
        "required": ["invitations"],
        "properties": {
          "invitations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FullWorkspaceInvitation" },
            "description": "All invitations of the current user"
          }
        }
      },
      "WsClientMessage": {
        "oneOf": [
          {
            "type": "object",
            "description": "A finding definition was edited",
            "required": ["change", "target", "type"],
            "properties": {
              "change": { "$ref": "#/components/schemas/Change" },
              "target": { "$ref": "#/components/schemas/EditorTarget" },
              "type": { "type": "string", "enum": ["EditorChangedContent"] }
            }
          },
          {
            "type": "object",
            "description": "The cursor position was changed",
            "required": ["cursor", "target", "type"],
            "properties": {
              "cursor": { "$ref": "#/components/schemas/CursorPosition" },
              "target": { "$ref": "#/components/schemas/EditorTarget" },
              "type": { "type": "string", "enum": ["EditorChangedCursor"] }
            }
          }
        ],
        "description": "Message that is sent via websocket from the client to the server.\n\nFor messages the server is able to send, look at [WsMessage]",
        "discriminator": { "propertyName": "type" }
      },
      "WsMessage": {
        "oneOf": [
          {
            "type": "object",
            "description": "An invalid message was received.\n\nThis message type is sent to the client.",
            "required": ["type"],
            "properties": {
              "type": { "type": "string", "enum": ["InvalidMessage"] }
            }
          },
          {
            "type": "object",
            "description": "An invitation to a workspace was issued",
            "required": ["invitation_uuid", "workspace", "from", "type"],
            "properties": {
              "invitation_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the invitation"
              },
              "workspace": { "$ref": "#/components/schemas/SimpleWorkspace" },
              "from": { "$ref": "#/components/schemas/SimpleUser" },
              "type": { "type": "string", "enum": ["InvitationToWorkspace"] }
            }
          },
          {
            "type": "object",
            "description": "A notification about a started attack",
            "required": ["attack", "type"],
            "properties": {
              "attack": { "$ref": "#/components/schemas/SimpleAttack" },
              "type": { "type": "string", "enum": ["AttackStarted"] }
            }
          },
          {
            "type": "object",
            "description": "A notification about a finished attack",
            "required": ["attack", "type"],
            "properties": {
              "attack": { "$ref": "#/components/schemas/SimpleAttack" },
              "type": { "type": "string", "enum": ["AttackFinished"] }
            }
          },
          {
            "type": "object",
            "description": "A notification about a finished search",
            "required": ["search_uuid", "finished_successful", "type"],
            "properties": {
              "search_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the search"
              },
              "finished_successful": {
                "type": "boolean",
                "description": "Whether the search was finished successfully"
              },
              "type": { "type": "string", "enum": ["SearchFinished"] }
            }
          },
          {
            "type": "object",
            "description": "A notification about a search result",
            "required": ["search_uuid", "result_uuid", "type"],
            "properties": {
              "search_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the search results"
              },
              "result_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "A result entry"
              },
              "type": { "type": "string", "enum": ["SearchNotify"] }
            }
          },
          {
            "type": "object",
            "description": "A result for a subdomain enumeration using bruteforce DNS requests",
            "required": ["attack_uuid", "source", "destination", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "source": {
                "type": "string",
                "description": "The source address that was queried"
              },
              "destination": {
                "type": "string",
                "description": "The destination address that was returned"
              },
              "type": {
                "type": "string",
                "enum": ["BruteforceSubdomainsResult"]
              }
            }
          },
          {
            "type": "object",
            "description": "A result for hosts alive check",
            "required": ["attack_uuid", "host", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "host": {
                "type": "string",
                "description": "A host which could be reached"
              },
              "type": { "type": "string", "enum": ["HostsAliveCheck"] }
            }
          },
          {
            "type": "object",
            "description": "A result for a tcp scan",
            "required": ["attack_uuid", "address", "port", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "address": {
                "type": "string",
                "description": "The address of the result"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "description": "The port of the result",
                "minimum": 0
              },
              "type": { "type": "string", "enum": ["ScanTcpPortsResult"] }
            }
          },
          {
            "type": "object",
            "description": "A result to a certificate transparency request",
            "required": ["attack_uuid", "entries", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CertificateTransparencyEntry"
                },
                "description": "The entries of the result"
              },
              "type": {
                "type": "string",
                "enum": ["CertificateTransparencyResult"]
              }
            }
          },
          {
            "type": "object",
            "description": "A result to service detection request",
            "required": ["attack_uuid", "address", "port", "services", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "address": {
                "type": "string",
                "description": "The address of the result"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "description": "The port of the result",
                "minimum": 0
              },
              "services": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Name of the service(s)"
              },
              "type": { "type": "string", "enum": ["ServiceDetectionResult"] }
            }
          },
          {
            "type": "object",
            "description": "A result to UDP service detection request",
            "required": ["attack_uuid", "address", "port", "services", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "address": {
                "type": "string",
                "description": "The address of the result"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "description": "The port of the result",
                "minimum": 0
              },
              "services": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Name of the service(s)"
              },
              "type": {
                "type": "string",
                "enum": ["UdpServiceDetectionResult"]
              }
            }
          },
          {
            "type": "object",
            "description": "A result for a DNS resolution requests",
            "required": ["attack_uuid", "source", "destination", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "source": {
                "type": "string",
                "description": "The source address that was queried"
              },
              "destination": {
                "type": "string",
                "description": "The destination address that was returned"
              },
              "type": { "type": "string", "enum": ["DnsResolutionResult"] }
            }
          },
          {
            "type": "object",
            "description": "A result for a DNS TXT scan request",
            "required": ["attack_uuid", "result", "type"],
            "properties": {
              "attack_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The corresponding id of the attack"
              },
              "result": { "$ref": "#/components/schemas/FullDnsTxtScanResult" },
              "type": { "type": "string", "enum": ["DnsTxtScanResult"] }
            }
          },
          {
            "type": "object",
            "description": "A new domain was found",
            "required": ["workspace", "domain", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this domain is related to"
              },
              "domain": { "$ref": "#/components/schemas/SimpleDomain" },
              "type": { "type": "string", "enum": ["NewDomain"] }
            }
          },
          {
            "type": "object",
            "description": "A new host was found",
            "required": ["workspace", "host", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this host is related to"
              },
              "host": { "$ref": "#/components/schemas/SimpleHost" },
              "type": { "type": "string", "enum": ["NewHost"] }
            }
          },
          {
            "type": "object",
            "description": "A new port was found",
            "required": ["workspace", "port", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this port is related to"
              },
              "port": { "$ref": "#/components/schemas/SimplePort" },
              "type": { "type": "string", "enum": ["NewPort"] }
            }
          },
          {
            "type": "object",
            "description": "A new service was found",
            "required": ["workspace", "service", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this service is related to"
              },
              "service": { "$ref": "#/components/schemas/SimpleService" },
              "type": { "type": "string", "enum": ["NewService"] }
            }
          },
          {
            "type": "object",
            "description": "A domain was deleted",
            "required": ["workspace", "domain", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this domain is related to"
              },
              "domain": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the deleted domain"
              },
              "type": { "type": "string", "enum": ["DeletedDomain"] }
            }
          },
          {
            "type": "object",
            "description": "A host was deleted",
            "required": ["workspace", "host", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this host is related to"
              },
              "host": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the deleted host"
              },
              "type": { "type": "string", "enum": ["DeletedHost"] }
            }
          },
          {
            "type": "object",
            "description": "A port was deleted",
            "required": ["workspace", "port", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this port is related to"
              },
              "port": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the deleted port"
              },
              "type": { "type": "string", "enum": ["DeletedPort"] }
            }
          },
          {
            "type": "object",
            "description": "A service was deleted",
            "required": ["workspace", "service", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace this service is related to"
              },
              "service": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the deleted service"
              },
              "type": { "type": "string", "enum": ["DeletedService"] }
            }
          },
          {
            "type": "object",
            "description": "Global tags were updated on an aggregation",
            "required": ["workspace", "aggregation", "uuid", "tags", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the aggregation is related to"
              },
              "aggregation": { "$ref": "#/components/schemas/AggregationType" },
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the model"
              },
              "tags": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" },
                "description": "The updated list of tags"
              },
              "type": { "type": "string", "enum": ["UpdatedGlobalTags"] }
            }
          },
          {
            "type": "object",
            "description": "Workspace tags were updated on an aggregation",
            "required": ["workspace", "aggregation", "uuid", "tags", "type"],
            "properties": {
              "workspace": {
                "type": "string",
                "format": "uuid",
                "description": "The workspace the aggregation is related to"
              },
              "aggregation": { "$ref": "#/components/schemas/AggregationType" },
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the model"
              },
              "tags": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" },
                "description": "The updated list of tags"
              },
              "type": { "type": "string", "enum": ["UpdatedWorkspaceTags"] }
            }
          },
          {
            "type": "object",
            "description": "A finding definition was deleted",
            "required": ["uuid", "type"],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the finding definition"
              },
              "type": { "type": "string", "enum": ["DeletedFindingDefinition"] }
            }
          },
          {
            "type": "object",
            "description": "A finding definition was updated",
            "required": ["change", "user", "target", "type"],
            "properties": {
              "change": { "$ref": "#/components/schemas/Change" },
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "target": { "$ref": "#/components/schemas/EditorTarget" },
              "type": { "type": "string", "enum": ["EditorChangedContent"] }
            }
          },
          {
            "type": "object",
            "description": "A user has changed its cursor position in an editor",
            "required": ["user", "target", "cursor", "type"],
            "properties": {
              "user": { "$ref": "#/components/schemas/SimpleUser" },
              "target": { "$ref": "#/components/schemas/EditorTarget" },
              "cursor": { "$ref": "#/components/schemas/CursorPosition" },
              "type": { "type": "string", "enum": ["EditorChangedCursor"] }
            }
          }
        ],
        "description": "Message that is sent via websocket\n\nThese messages are only invoked by the Server.\nFor messages the client is able to send, look at [WsClientMessage]",
        "discriminator": { "propertyName": "type" }
      }
    },
    "securitySchemes": {
      "api_key": { "type": "apiKey", "in": "cookie", "name": "id" }
    }
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreatePortRequest,
  FullAggregationSource,
  FullPort,
  GetAllPortsQuery,
  PortRelations,
  PortResultsPage,
  UpdatePortRequest,
  UuidResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreatePortRequestFromJSON,
    CreatePortRequestToJSON,
    FullAggregationSourceFromJSON,
    FullAggregationSourceToJSON,
    FullPortFromJSON,
    FullPortToJSON,
    GetAllPortsQueryFromJSON,
    GetAllPortsQueryToJSON,
    PortRelationsFromJSON,
    PortRelationsToJSON,
    PortResultsPageFromJSON,
    PortResultsPageToJSON,
    UpdatePortRequestFromJSON,
    UpdatePortRequestToJSON,
    UuidResponseFromJSON,
    UuidResponseToJSON,
} from '../models';

export interface CreatePortOperationRequest {
    uuid: string;
    createPortRequest: CreatePortRequest;
}

export interface DeletePortRequest {
    wUuid: string;
    pUuid: string;
}

export interface GetAllPortsRequest {
    uuid: string;
    getAllPortsQuery: GetAllPortsQuery;
}

export interface GetPortRequest {
    wUuid: string;
    pUuid: string;
}

export interface GetPortRelationsRequest {
    wUuid: string;
    pUuid: string;
}

export interface GetPortSourcesRequest {
    wUuid: string;
    pUuid: string;
}

export interface UpdatePortOperationRequest {
    wUuid: string;
    pUuid: string;
    updatePortRequest: UpdatePortRequest;
}

/**
 * 
 */
export class PortsApi extends runtime.BaseAPI {

    /**
     * Manually add a port
     * Manually add a port
     */
    async createPortRaw(requestParameters: CreatePortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling createPort.');
        }

        if (requestParameters.createPortRequest === null || requestParameters.createPortRequest === undefined) {
            throw new runtime.RequiredError('createPortRequest','Required parameter requestParameters.createPortRequest was null or undefined when calling createPort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/ports`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePortRequestToJSON(requestParameters.createPortRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Manually add a port
     * Manually add a port
     */
    async createPort(requestParameters: CreatePortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.createPortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the port  This only deletes the aggregation. The raw results are still in place
     * Delete the port
     */
    async deletePortRaw(requestParameters: DeletePortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling deletePort.');
        }

        if (requestParameters.pUuid === null || requestParameters.pUuid === undefined) {
            throw new runtime.RequiredError('pUuid','Required parameter requestParameters.pUuid was null or undefined when calling deletePort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/ports/{p_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"p_uuid"}}`, encodeURIComponent(String(requestParameters.pUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the port  This only deletes the aggregation. The raw results are still in place
     * Delete the port
     */
    async deletePort(requestParameters: DeletePortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePortRaw(requestParameters, initOverrides);
    }

    /**
     * List the ports of a workspace
     * List the ports of a workspace
     */
    async getAllPortsRaw(requestParameters: GetAllPortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAllPorts.');
        }

        if (requestParameters.getAllPortsQuery === null || requestParameters.getAllPortsQuery === undefined) {
            throw new runtime.RequiredError('getAllPortsQuery','Required parameter requestParameters.getAllPortsQuery was null or undefined when calling getAllPorts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/ports/all`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetAllPortsQueryToJSON(requestParameters.getAllPortsQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortResultsPageFromJSON(jsonValue));
    }

    /**
     * List the ports of a workspace
     * List the ports of a workspace
     */
    async getAllPorts(requestParameters: GetAllPortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortResultsPage> {
        const response = await this.getAllPortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all information about a single port
     * Retrieve all information about a single port
     */
    async getPortRaw(requestParameters: GetPortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullPort>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling getPort.');
        }

        if (requestParameters.pUuid === null || requestParameters.pUuid === undefined) {
            throw new runtime.RequiredError('pUuid','Required parameter requestParameters.pUuid was null or undefined when calling getPort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/ports/{p_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"p_uuid"}}`, encodeURIComponent(String(requestParameters.pUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullPortFromJSON(jsonValue));
    }

    /**
     * Retrieve all information about a single port
     * Retrieve all information about a single port
     */
    async getPort(requestParameters: GetPortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullPort> {
        const response = await this.getPortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a port\'s direct relations
     * Get a port\'s direct relations
     */
    async getPortRelationsRaw(requestParameters: GetPortRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortRelations>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling getPortRelations.');
        }

        if (requestParameters.pUuid === null || requestParameters.pUuid === undefined) {
            throw new runtime.RequiredError('pUuid','Required parameter requestParameters.pUuid was null or undefined when calling getPortRelations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/ports/{p_uuid}/relations`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"p_uuid"}}`, encodeURIComponent(String(requestParameters.pUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortRelationsFromJSON(jsonValue));
    }

    /**
     * Get a port\'s direct relations
     * Get a port\'s direct relations
     */
    async getPortRelations(requestParameters: GetPortRelationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortRelations> {
        const response = await this.getPortRelationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all data sources which referenced this port
     * Get all data sources which referenced this port
     */
    async getPortSourcesRaw(requestParameters: GetPortSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullAggregationSource>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling getPortSources.');
        }

        if (requestParameters.pUuid === null || requestParameters.pUuid === undefined) {
            throw new runtime.RequiredError('pUuid','Required parameter requestParameters.pUuid was null or undefined when calling getPortSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/ports/{p_uuid}/sources`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"p_uuid"}}`, encodeURIComponent(String(requestParameters.pUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullAggregationSourceFromJSON(jsonValue));
    }

    /**
     * Get all data sources which referenced this port
     * Get all data sources which referenced this port
     */
    async getPortSources(requestParameters: GetPortSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullAggregationSource> {
        const response = await this.getPortSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a port  You must include at least on parameter
     * Update a port
     */
    async updatePortRaw(requestParameters: UpdatePortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling updatePort.');
        }

        if (requestParameters.pUuid === null || requestParameters.pUuid === undefined) {
            throw new runtime.RequiredError('pUuid','Required parameter requestParameters.pUuid was null or undefined when calling updatePort.');
        }

        if (requestParameters.updatePortRequest === null || requestParameters.updatePortRequest === undefined) {
            throw new runtime.RequiredError('updatePortRequest','Required parameter requestParameters.updatePortRequest was null or undefined when calling updatePort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/ports/{p_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"p_uuid"}}`, encodeURIComponent(String(requestParameters.pUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePortRequestToJSON(requestParameters.updatePortRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a port  You must include at least on parameter
     * Update a port
     */
    async updatePort(requestParameters: UpdatePortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePortRaw(requestParameters, initOverrides);
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  BruteforceSubdomainsRequest,
  BruteforceSubdomainsResultsPage,
  DnsResolutionRequest,
  DnsResolutionResultsPage,
  HostAliveResultsPage,
  HostsAliveRequest,
  ListAttacks,
  QueryCertificateTransparencyRequest,
  QueryCertificateTransparencyResultsPage,
  QueryDehashedRequest,
  QueryUnhashedResultsPage,
  ScanTcpPortsRequest,
  ServiceDetectionRequest,
  ServiceDetectionResultsPage,
  SimpleAttack,
  TcpPortScanResultsPage,
  UdpServiceDetectionRequest,
  UdpServiceDetectionResultsPage,
  UuidResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    BruteforceSubdomainsRequestFromJSON,
    BruteforceSubdomainsRequestToJSON,
    BruteforceSubdomainsResultsPageFromJSON,
    BruteforceSubdomainsResultsPageToJSON,
    DnsResolutionRequestFromJSON,
    DnsResolutionRequestToJSON,
    DnsResolutionResultsPageFromJSON,
    DnsResolutionResultsPageToJSON,
    HostAliveResultsPageFromJSON,
    HostAliveResultsPageToJSON,
    HostsAliveRequestFromJSON,
    HostsAliveRequestToJSON,
    ListAttacksFromJSON,
    ListAttacksToJSON,
    QueryCertificateTransparencyRequestFromJSON,
    QueryCertificateTransparencyRequestToJSON,
    QueryCertificateTransparencyResultsPageFromJSON,
    QueryCertificateTransparencyResultsPageToJSON,
    QueryDehashedRequestFromJSON,
    QueryDehashedRequestToJSON,
    QueryUnhashedResultsPageFromJSON,
    QueryUnhashedResultsPageToJSON,
    ScanTcpPortsRequestFromJSON,
    ScanTcpPortsRequestToJSON,
    ServiceDetectionRequestFromJSON,
    ServiceDetectionRequestToJSON,
    ServiceDetectionResultsPageFromJSON,
    ServiceDetectionResultsPageToJSON,
    SimpleAttackFromJSON,
    SimpleAttackToJSON,
    TcpPortScanResultsPageFromJSON,
    TcpPortScanResultsPageToJSON,
    UdpServiceDetectionRequestFromJSON,
    UdpServiceDetectionRequestToJSON,
    UdpServiceDetectionResultsPageFromJSON,
    UdpServiceDetectionResultsPageToJSON,
    UuidResponseFromJSON,
    UuidResponseToJSON,
} from '../models';

export interface BruteforceSubdomainsOperationRequest {
    bruteforceSubdomainsRequest: BruteforceSubdomainsRequest;
}

export interface DeleteAttackRequest {
    uuid: string;
}

export interface DnsResolutionOperationRequest {
    dnsResolutionRequest: DnsResolutionRequest;
}

export interface GetAttackRequest {
    uuid: string;
}

export interface GetBruteforceSubdomainsResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetDnsResolutionResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetHostAliveResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetQueryCertificateTransparencyResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetQueryUnhashedResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetServiceDetectionResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetTcpPortScanResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetUdpServiceDetectionResultsRequest {
    uuid: string;
    limit: number;
    offset: number;
}

export interface GetWorkspaceAttacksRequest {
    uuid: string;
}

export interface HostsAliveCheckRequest {
    hostsAliveRequest: HostsAliveRequest;
}

export interface QueryCertificateTransparencyOperationRequest {
    queryCertificateTransparencyRequest: QueryCertificateTransparencyRequest;
}

export interface QueryDehashedOperationRequest {
    queryDehashedRequest: QueryDehashedRequest;
}

export interface ScanTcpPortsOperationRequest {
    scanTcpPortsRequest: ScanTcpPortsRequest;
}

export interface ServiceDetectionOperationRequest {
    serviceDetectionRequest: ServiceDetectionRequest;
}

export interface UdpServiceDetectionOperationRequest {
    udpServiceDetectionRequest: UdpServiceDetectionRequest;
}

/**
 * 
 */
export class AttacksApi extends runtime.BaseAPI {

    /**
     * Bruteforce subdomains through a DNS wordlist attack  Enumerate possible subdomains by querying a DNS server with constructed domains. See [OWASP](https://owasp.org/www-community/attacks/Brute_force_attack) for further information.
     * Bruteforce subdomains through a DNS wordlist attack
     */
    async bruteforceSubdomainsRaw(requestParameters: BruteforceSubdomainsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.bruteforceSubdomainsRequest === null || requestParameters.bruteforceSubdomainsRequest === undefined) {
            throw new runtime.RequiredError('bruteforceSubdomainsRequest','Required parameter requestParameters.bruteforceSubdomainsRequest was null or undefined when calling bruteforceSubdomains.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/bruteforceSubdomains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BruteforceSubdomainsRequestToJSON(requestParameters.bruteforceSubdomainsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Bruteforce subdomains through a DNS wordlist attack  Enumerate possible subdomains by querying a DNS server with constructed domains. See [OWASP](https://owasp.org/www-community/attacks/Brute_force_attack) for further information.
     * Bruteforce subdomains through a DNS wordlist attack
     */
    async bruteforceSubdomains(requestParameters: BruteforceSubdomainsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.bruteforceSubdomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an attack and its results
     * Delete an attack and its results
     */
    async deleteAttackRaw(requestParameters: DeleteAttackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteAttack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an attack and its results
     * Delete an attack and its results
     */
    async deleteAttack(requestParameters: DeleteAttackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttackRaw(requestParameters, initOverrides);
    }

    /**
     * Perform domain name resolution
     * Perform domain name resolution
     */
    async dnsResolutionRaw(requestParameters: DnsResolutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.dnsResolutionRequest === null || requestParameters.dnsResolutionRequest === undefined) {
            throw new runtime.RequiredError('dnsResolutionRequest','Required parameter requestParameters.dnsResolutionRequest was null or undefined when calling dnsResolution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/dnsResolution`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DnsResolutionRequestToJSON(requestParameters.dnsResolutionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Perform domain name resolution
     * Perform domain name resolution
     */
    async dnsResolution(requestParameters: DnsResolutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.dnsResolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all attacks the user has access to
     * Retrieve all attacks the user has access to
     */
    async getAllAttacksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAttacks>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAttacksFromJSON(jsonValue));
    }

    /**
     * Retrieve all attacks the user has access to
     * Retrieve all attacks the user has access to
     */
    async getAllAttacks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAttacks> {
        const response = await this.getAllAttacksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an attack by id
     * Retrieve an attack by id
     */
    async getAttackRaw(requestParameters: GetAttackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleAttack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAttack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleAttackFromJSON(jsonValue));
    }

    /**
     * Retrieve an attack by id
     * Retrieve an attack by id
     */
    async getAttack(requestParameters: GetAttackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleAttack> {
        const response = await this.getAttackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a bruteforce subdomains\' results by the attack\'s id
     * Retrieve a bruteforce subdomains\' results by the attack\'s id
     */
    async getBruteforceSubdomainsResultsRaw(requestParameters: GetBruteforceSubdomainsResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BruteforceSubdomainsResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getBruteforceSubdomainsResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getBruteforceSubdomainsResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getBruteforceSubdomainsResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/bruteforceSubdomainsResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BruteforceSubdomainsResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a bruteforce subdomains\' results by the attack\'s id
     * Retrieve a bruteforce subdomains\' results by the attack\'s id
     */
    async getBruteforceSubdomainsResults(requestParameters: GetBruteforceSubdomainsResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BruteforceSubdomainsResultsPage> {
        const response = await this.getBruteforceSubdomainsResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a dns resolution\'s results by the attack\'s id
     * Retrieve a dns resolution\'s results by the attack\'s id
     */
    async getDnsResolutionResultsRaw(requestParameters: GetDnsResolutionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DnsResolutionResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getDnsResolutionResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getDnsResolutionResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getDnsResolutionResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/dnsResolutionResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DnsResolutionResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a dns resolution\'s results by the attack\'s id
     * Retrieve a dns resolution\'s results by the attack\'s id
     */
    async getDnsResolutionResults(requestParameters: GetDnsResolutionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DnsResolutionResultsPage> {
        const response = await this.getDnsResolutionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a host alive\'s results by the attack\'s id
     * Retrieve a host alive\'s results by the attack\'s id
     */
    async getHostAliveResultsRaw(requestParameters: GetHostAliveResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HostAliveResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getHostAliveResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getHostAliveResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getHostAliveResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/hostAliveResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HostAliveResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a host alive\'s results by the attack\'s id
     * Retrieve a host alive\'s results by the attack\'s id
     */
    async getHostAliveResults(requestParameters: GetHostAliveResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HostAliveResultsPage> {
        const response = await this.getHostAliveResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a query certificate transparency\'s results by the attack\'s id
     * Retrieve a query certificate transparency\'s results by the attack\'s id
     */
    async getQueryCertificateTransparencyResultsRaw(requestParameters: GetQueryCertificateTransparencyResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryCertificateTransparencyResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getQueryCertificateTransparencyResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getQueryCertificateTransparencyResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getQueryCertificateTransparencyResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/queryCertificateTransparencyResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryCertificateTransparencyResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a query certificate transparency\'s results by the attack\'s id
     * Retrieve a query certificate transparency\'s results by the attack\'s id
     */
    async getQueryCertificateTransparencyResults(requestParameters: GetQueryCertificateTransparencyResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryCertificateTransparencyResultsPage> {
        const response = await this.getQueryCertificateTransparencyResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a query dehashed\'s results by the attack\'s id
     * Retrieve a query dehashed\'s results by the attack\'s id
     */
    async getQueryUnhashedResultsRaw(requestParameters: GetQueryUnhashedResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryUnhashedResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getQueryUnhashedResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getQueryUnhashedResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getQueryUnhashedResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/queryUnhashedResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryUnhashedResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a query dehashed\'s results by the attack\'s id
     * Retrieve a query dehashed\'s results by the attack\'s id
     */
    async getQueryUnhashedResults(requestParameters: GetQueryUnhashedResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryUnhashedResultsPage> {
        const response = await this.getQueryUnhashedResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a detect service\'s results by the attack\'s id
     * Retrieve a detect service\'s results by the attack\'s id
     */
    async getServiceDetectionResultsRaw(requestParameters: GetServiceDetectionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDetectionResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getServiceDetectionResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getServiceDetectionResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getServiceDetectionResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/serviceDetectionResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDetectionResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a detect service\'s results by the attack\'s id
     * Retrieve a detect service\'s results by the attack\'s id
     */
    async getServiceDetectionResults(requestParameters: GetServiceDetectionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDetectionResultsPage> {
        const response = await this.getServiceDetectionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a tcp port scan\'s results by the attack\'s id
     * Retrieve a tcp port scan\'s results by the attack\'s id
     */
    async getTcpPortScanResultsRaw(requestParameters: GetTcpPortScanResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TcpPortScanResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getTcpPortScanResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getTcpPortScanResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getTcpPortScanResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/tcpPortScanResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TcpPortScanResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve a tcp port scan\'s results by the attack\'s id
     * Retrieve a tcp port scan\'s results by the attack\'s id
     */
    async getTcpPortScanResults(requestParameters: GetTcpPortScanResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TcpPortScanResultsPage> {
        const response = await this.getTcpPortScanResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve UDP service detection results by the attack\'s id
     * Retrieve UDP service detection results by the attack\'s id
     */
    async getUdpServiceDetectionResultsRaw(requestParameters: GetUdpServiceDetectionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UdpServiceDetectionResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getUdpServiceDetectionResults.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getUdpServiceDetectionResults.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getUdpServiceDetectionResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/attacks/{uuid}/udpServiceDetectionResults`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UdpServiceDetectionResultsPageFromJSON(jsonValue));
    }

    /**
     * Retrieve UDP service detection results by the attack\'s id
     * Retrieve UDP service detection results by the attack\'s id
     */
    async getUdpServiceDetectionResults(requestParameters: GetUdpServiceDetectionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UdpServiceDetectionResultsPage> {
        const response = await this.getUdpServiceDetectionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query all attacks of a workspace
     * Query all attacks of a workspace
     */
    async getWorkspaceAttacksRaw(requestParameters: GetWorkspaceAttacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAttacks>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getWorkspaceAttacks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/attacks`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAttacksFromJSON(jsonValue));
    }

    /**
     * Query all attacks of a workspace
     * Query all attacks of a workspace
     */
    async getWorkspaceAttacks(requestParameters: GetWorkspaceAttacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAttacks> {
        const response = await this.getWorkspaceAttacksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if hosts are reachable  Just an ICMP scan for now to see which targets respond.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.
     * Check if hosts are reachable
     */
    async hostsAliveCheckRaw(requestParameters: HostsAliveCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.hostsAliveRequest === null || requestParameters.hostsAliveRequest === undefined) {
            throw new runtime.RequiredError('hostsAliveRequest','Required parameter requestParameters.hostsAliveRequest was null or undefined when calling hostsAliveCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/hostsAlive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HostsAliveRequestToJSON(requestParameters.hostsAliveRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Check if hosts are reachable  Just an ICMP scan for now to see which targets respond.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.
     * Check if hosts are reachable
     */
    async hostsAliveCheck(requestParameters: HostsAliveCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.hostsAliveCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query a certificate transparency log collector.  For further information, see [the explanation](https://certificate.transparency.dev/).  Certificate transparency can be used to find subdomains or related domains.  `retry_interval` is specified in milliseconds.
     * Query a certificate transparency log collector.
     */
    async queryCertificateTransparencyRaw(requestParameters: QueryCertificateTransparencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.queryCertificateTransparencyRequest === null || requestParameters.queryCertificateTransparencyRequest === undefined) {
            throw new runtime.RequiredError('queryCertificateTransparencyRequest','Required parameter requestParameters.queryCertificateTransparencyRequest was null or undefined when calling queryCertificateTransparency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/queryCertificateTransparency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryCertificateTransparencyRequestToJSON(requestParameters.queryCertificateTransparencyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Query a certificate transparency log collector.  For further information, see [the explanation](https://certificate.transparency.dev/).  Certificate transparency can be used to find subdomains or related domains.  `retry_interval` is specified in milliseconds.
     * Query a certificate transparency log collector.
     */
    async queryCertificateTransparency(requestParameters: QueryCertificateTransparencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.queryCertificateTransparencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query the [dehashed](https://dehashed.com/) API. It provides email, password, credit cards and other types of information from leak-databases.  Note that you are only able to query the API if you have bought access and have a running subscription saved in kraken.
     * Query the [dehashed](https://dehashed.com/) API.
     */
    async queryDehashedRaw(requestParameters: QueryDehashedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.queryDehashedRequest === null || requestParameters.queryDehashedRequest === undefined) {
            throw new runtime.RequiredError('queryDehashedRequest','Required parameter requestParameters.queryDehashedRequest was null or undefined when calling queryDehashed.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/queryDehashed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDehashedRequestToJSON(requestParameters.queryDehashedRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Query the [dehashed](https://dehashed.com/) API. It provides email, password, credit cards and other types of information from leak-databases.  Note that you are only able to query the API if you have bought access and have a running subscription saved in kraken.
     * Query the [dehashed](https://dehashed.com/) API.
     */
    async queryDehashed(requestParameters: QueryDehashedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.queryDehashedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a tcp port scan  `exclude` accepts a list of ip networks in CIDR notation.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.  Set `max_retries` to 0 if you don\'t want to try a port more than 1 time.
     * Start a tcp port scan
     */
    async scanTcpPortsRaw(requestParameters: ScanTcpPortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.scanTcpPortsRequest === null || requestParameters.scanTcpPortsRequest === undefined) {
            throw new runtime.RequiredError('scanTcpPortsRequest','Required parameter requestParameters.scanTcpPortsRequest was null or undefined when calling scanTcpPorts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/scanTcpPorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScanTcpPortsRequestToJSON(requestParameters.scanTcpPortsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Start a tcp port scan  `exclude` accepts a list of ip networks in CIDR notation.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.  Set `max_retries` to 0 if you don\'t want to try a port more than 1 time.
     * Start a tcp port scan
     */
    async scanTcpPorts(requestParameters: ScanTcpPortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.scanTcpPortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform service detection on a ip and port combination
     * Perform service detection on a ip and port combination
     */
    async serviceDetectionRaw(requestParameters: ServiceDetectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.serviceDetectionRequest === null || requestParameters.serviceDetectionRequest === undefined) {
            throw new runtime.RequiredError('serviceDetectionRequest','Required parameter requestParameters.serviceDetectionRequest was null or undefined when calling serviceDetection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/serviceDetection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceDetectionRequestToJSON(requestParameters.serviceDetectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Perform service detection on a ip and port combination
     * Perform service detection on a ip and port combination
     */
    async serviceDetection(requestParameters: ServiceDetectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.serviceDetectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform UDP service detection on an ip on a list of ports.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.  Set `max_retries` to 0 if you don\'t want to try a port more than 1 time.
     * Perform UDP service detection on an ip on a list of ports.
     */
    async udpServiceDetectionRaw(requestParameters: UdpServiceDetectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidResponse>> {
        if (requestParameters.udpServiceDetectionRequest === null || requestParameters.udpServiceDetectionRequest === undefined) {
            throw new runtime.RequiredError('udpServiceDetectionRequest','Required parameter requestParameters.udpServiceDetectionRequest was null or undefined when calling udpServiceDetection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/attacks/udpServiceDetection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UdpServiceDetectionRequestToJSON(requestParameters.udpServiceDetectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UuidResponseFromJSON(jsonValue));
    }

    /**
     * Perform UDP service detection on an ip on a list of ports.  All intervals are interpreted in milliseconds. E.g. a `timeout` of 3000 means 3 seconds.  Set `max_retries` to 0 if you don\'t want to try a port more than 1 time.
     * Perform UDP service detection on an ip on a list of ports.
     */
    async udpServiceDetection(requestParameters: UdpServiceDetectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidResponse> {
        const response = await this.udpServiceDetectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

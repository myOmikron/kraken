/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A domain was deleted
 * @export
 * @interface WsMessageOneOf17
 */
export interface WsMessageOneOf17 {
    /**
     * The workspace this domain is related to
     * @type {string}
     * @memberof WsMessageOneOf17
     */
    workspace: string;
    /**
     * The uuid of the deleted domain
     * @type {string}
     * @memberof WsMessageOneOf17
     */
    domain: string;
    /**
     * 
     * @type {string}
     * @memberof WsMessageOneOf17
     */
    type: WsMessageOneOf17TypeEnum;
}


/**
 * @export
 */
export const WsMessageOneOf17TypeEnum = {
    DeletedDomain: 'DeletedDomain'
} as const;
export type WsMessageOneOf17TypeEnum = typeof WsMessageOneOf17TypeEnum[keyof typeof WsMessageOneOf17TypeEnum];


/**
 * Check if a given object implements the WsMessageOneOf17 interface.
 */
export function instanceOfWsMessageOneOf17(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function WsMessageOneOf17FromJSON(json: any): WsMessageOneOf17 {
    return WsMessageOneOf17FromJSONTyped(json, false);
}

export function WsMessageOneOf17FromJSONTyped(json: any, ignoreDiscriminator: boolean): WsMessageOneOf17 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workspace': json['workspace'],
        'domain': json['domain'],
        'type': json['type'],
    };
}

export function WsMessageOneOf17ToJSON(value?: WsMessageOneOf17 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workspace': value.workspace,
        'domain': value.domain,
        'type': value.type,
    };
}

